{
	"info": {
		"_postman_id": "f0e4f7ab-485b-4400-b4c0-cfce2f790a27",
		"name": "Personal Demographics Service (Pipeline)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Framwork Setup",
			"item": [
				{
					"name": "createPatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e4a1a37b-83e7-4b1b-a914-93456b6d980c",
								"exec": [
									"/*CreatePatient Function*/",
									"",
									"var createPatient = () => {",
									"",
									"        /*create a random firstname*/",
									"        let given = pm.variables.replaceIn(\"{{$randomFirstName}}\");",
									"        pm.variables.set(\"given\", given);",
									"        console.log(\"Random 'Given' name created is: \" + pm.variables.get(\"given\"));",
									"",
									"        /*create a random lastname*/",
									"        let family = pm.variables.replaceIn(\"{{$randomLastName}}\");",
									"        pm.variables.set(\"family\", family);",
									"        console.log(\"Random 'family' name created is: \" + pm.variables.get(\"family\"));",
									"",
									"        /*create a random houseNumber*/",
									"        let addressHouseNumber = pm.variables.replaceIn(\"{{$randomInt}}\");",
									"        pm.variables.set(\"addressHouseNumber\", addressHouseNumber);",
									"        console.log(\"Random 'houseNumber' created is: \" + pm.variables.get(\"addressHouseNumber\"));",
									"",
									"        /*create a random Street*/",
									"        let addressStreet = pm.variables.replaceIn(\"{{$randomStreetName}}\");",
									"        pm.variables.set(\"addressStreet\", addressStreet);",
									"        console.log(\"Random 'addressStreet' created is: \" + pm.variables.get(\"addressStreet\"));",
									"",
									"        /*create a random District*/",
									"        let addressDistrict = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" District\";",
									"        pm.variables.set(\"addressDistrict\", addressDistrict);",
									"        console.log(\"Random 'addressDistrict' created is: \" + pm.variables.get(\"addressDistrict\"));",
									"",
									"        /*create a random City*/",
									"        let addressCity = pm.variables.replaceIn(\"{{$randomCity}}\");",
									"        pm.variables.set(\"addressCity\", addressCity);",
									"        console.log(\"Random 'addressCity' created is: \" + pm.variables.get(\"addressCity\"));",
									"",
									"        /*create a random County*/",
									"        let addressCounty = (pm.variables.replaceIn(\"{{$randomWord}}\")) + \" County\";",
									"        pm.variables.set(\"addressCounty\", addressCounty);",
									"        console.log(\"Random 'addressCounty' created is: \" + pm.variables.get(\"addressCounty\"));",
									"",
									"        /*create a random postCode*/",
									"        pm.variables.set(\"postCode\", \"PD12\" + _.random(1, 9) + \"PD\");",
									"        console.log(\"Random 'postCode' created is: \" + pm.variables.get(\"postCode\"));",
									"",
									"        /*create a random gender*/",
									"        pm.variables.set(\"gender\", _.random(1, 2));",
									"        console.log(\"Random 'gender' created is: \" + pm.variables.get(\"gender\"));",
									"",
									"        /*create a random birthDate*/",
									"        var moment = require('moment');",
									"        let randomYears = _.random(10, 50);",
									"        pm.variables.set(\"birthTime\", moment().subtract(randomYears, 'years').format(\"YYYYMMDD\"));",
									"        pm.variables.set(\"birthDate\", moment().subtract(randomYears, 'years').format(\"YYYY-MM-DD\"));",
									"        console.log(\"Random 'birthTime' created is: \" + pm.variables.get(\"birthTime\"));",
									"        console.log(\"Random 'birthDate' created is: \" + pm.variables.get(\"birthDate\"));",
									"      ",
									"};",
									"pm.globals.set(\"createPatient\", createPatient.toString());",
									"createPatient();",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "28942d07-bac6-4298-a130-f2594c8bebd8",
								"exec": [
									"eval(pm.globals.get(\"createPatient\"))();"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "This function creates a patient made up of randomised variables, consiting of: \n\n- given name\n- family name\n- address lines (5 lines in total)\n- postcode\n- gender\n- birthdate\n\nit can be used to create a Patient using the Personal Demographics service - HL7 V3 API"
					},
					"response": []
				},
				{
					"name": "FHIR Error Reponse Validator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d58c4729-c3f6-4d21-8f48-1e9bc8bef18f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1ec25a68-b4a2-4a0a-8b7c-bc757fb44d14",
								"exec": [
									"// Error Message Validation: Provides tests to assert against FHIR error response",
									"",
									"pm.globals.set('errorMessage', function errorMessage() {",
									"    let response = pm.response.json();",
									"    let message = {};",
									"",
									"    message.assertCodeIs = (code) => {",
									"        pm.test(\"Returns the code \" + code, () => {",
									"            pm.expect(response.issue[0].details.coding[0].code).to.eql(code);",
									"        });",
									"    }",
									"",
									"    message.assertDisplayIs = (display) => {",
									"        pm.test(\"Returns the display message \" + display, () => {",
									"            pm.expect(response.issue[0].details.coding[0].display).to.eql(display);",
									"        });",
									"    }",
									"",
									"    message.assertDiagnosticsIs = (diagnostics) => {",
									"        pm.test(\"Returns the diagnostics message \" + diagnostics, () => {",
									"            pm.expect(response.issue[0].diagnostics).to.eql(diagnostics);",
									"        });",
									"    }",
									"",
									"    message.assertSeverityIs = (severity) => {",
									"        pm.test(\"Returns the severity \" + severity, () => {",
									"            pm.expect(response.issue[0].severity).to.eql(severity);",
									"        });",
									"    }",
									"    ",
									"",
									"    message.assertSystemIs = (system) => {",
									"        pm.test(\"Returns the system message \" + system, () => {",
									"            pm.expect(response.issue[0].details.coding[0].system).to.eql(system);",
									"        });",
									"    }",
									"",
									"    return message;",
									"} + '; errorMessage();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "# Function: FHIR Error Response Validator\n___\n### Description\nThis function provides the capability to assert aspects of the generic FHIR based error response matches expectation.\n \n##### Example FHIR Error Response\n```\n{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}\n```\n\n### Usage\nUse eval to evaluate the function, which is stored as the global variable _errorMessage_\n```\neval(pm.globals.get(\"errorMessage\"));\n```\nCall the various different internal 'methods' to assert against key parts of the error message\n```\nerrorMessage().assertCodeIs(\"EXTRA_VALUE\");\nerrorMessage().assertDisplayIs(\"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\");\nerrorMessage().assertSeverityIs(\"error\");\nerrorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");\n```\n\n### Output\n- PASS Returns the code EXTRA_VALUE\n- PASS Returns the display message Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\n- PASS Returns the severity error\n- PASS Returns the system message https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode"
					},
					"response": []
				},
				{
					"name": "Patient Validator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8dcd1e73-5b53-49e7-928c-81d1f1e9b5a7",
								"exec": [
									"// Patient Utility: Provides key patient response related functions",
									"pm.globals.set('patient', function patient() {",
									"    let response = pm.response.json();",
									"    let calls = {};",
									"",
									"    calls.getScores = () => {",
									"        var scores = [];",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            scores.push(response.entry[i].search.score);",
									"        }",
									"",
									"        return scores;",
									"    }",
									"",
									"    calls.getTotalNumberOfPatients = () => {",
									"        let response = JSON.parse(responseBody);",
									"        return response.total;",
									"    };",
									"    ",
									"    calls.containsPatientWithNhsNumber = function(nhsNumber) {",
									"        for (i = 0; i < response.entry.length; i++) {",
									"            if(response.entry[i].resource.id === nhsNumber) {",
									"                return true;",
									"            }",
									"        }",
									"",
									"        return false;",
									"    };",
									"    ",
									"    calls.getScoreByNhsNumber = function(resp, nhsNumber) {",
									"        console.log(\"HERE: \" + resp);",
									"        for (i = 0; i < resp.entry.length; i++) {",
									"            if (resp.entry[i].resource.id === nhsNumber) {",
									"                return resp.entry[i].search.score;",
									"            }",
									"        }",
									"",
									"        return null;",
									"    };",
									"",
									"    return calls;",
									"} + '; patient();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Response Assertions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c574048e-88bd-4289-ac15-635323da8bc9",
								"exec": [
									"// Assert utility: Tests for key aspects of the response",
									"pm.globals.set(\"assertThatUtil\", function assertThatUtil() {",
									"    let response = pm.response.json();",
									"    let util = {};",
									"",
									"    util.statusCodeIs = (code) => {",
									"        pm.test(\"Returns status code \" + code, () => {                    ",
									"            pm.response.to.have.status(code);            ",
									"        });",
									"",
									"    };",
									"",
									"    util.responseContainsHeader = (headerName, headerValue) => {",
									"        pm.test(\"Response contains header \" + headerName + \" with value \" + headerValue, () =>{",
									"            pm.response.to.have.header(headerName);",
									"            pm.expect(postman.getResponseHeader(headerName)).to.equal(headerValue);",
									"        });",
									"    };",
									"",
									"    return util;",
									"} + '; assertThatUtil();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildAndSendHL7Patient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28cc919e-e724-4691-a52e-5e3c08d4f91a",
								"exec": [
									"var BuildHL7Patient = () => {\r",
									"    let givenName = 'Testing';\r",
									"\r",
									"    let patientBuilder = pm.variables.get('PatientBuilder');\r",
									"    if(patientBuilder) {        \r",
									"        givenName = (patientBuilder.hasGivenName == true || patientBuilder.hasGivenName == undefined)  ? givenName : undefined;        \r",
									"    }\r",
									"\r",
									"    /*create a random guid for messageid*/\r",
									"    let messageGUID = pm.variables.replaceIn('{{$randomUUID}}')\r",
									"    pm.variables.set(\"HL7messageGUID\", messageGUID);\r",
									"\r",
									"    /*create a random guid for rootid*/\r",
									"    let rootGUID = pm.variables.replaceIn('{{$randomUUID}}')\r",
									"    pm.variables.set(\"HL7rootGUID\", rootGUID);\r",
									"\r",
									"    /*create a random lastname*/\r",
									"    let family = pm.variables.replaceIn(\"{{$randomLastName}}\");\r",
									"    pm.variables.set(\"family\", family);\r",
									"    console.log(pm.variables.get(\"family\"))\r",
									"\r",
									"    /*create a random postCode*/\r",
									"    pm.variables.set(\"postCode\", \"HL12\" + \" \" + _.random(1, 9) + \"HL\");\r",
									"    console.log(pm.variables.get(\"postCode\"))\r",
									"\r",
									"    /*create a random birthDate*/\r",
									"    var moment = require('moment');\r",
									"    let randomYears = _.random(10, 50);\r",
									"    pm.variables.set(\"birthTime\", moment().subtract(randomYears, 'years').format(\"YYYYMMDD\"));\r",
									"    pm.variables.set(\"birthDate\", moment().subtract(randomYears, 'years').format(\"YYYY-MM-DD\"));\r",
									"    console.log(pm.variables.get(\"birthDate\"))\r",
									"\r",
									"    pm.globals.set(\"HL7PatientMessage\", '----=_MIME-Boundary' + '\\n' + 'Content-Id: <8e68e6bb-2044-44f1-9427-271bccdad97a>' + '\\n' + 'Content-Type: text/xml' + '\\n' + 'Content-Transfer-Encoding: 8bit' + '\\n\\n' + '<?xml version=\"1.0\" encoding=\"UTF-8\"?><SOAP:Envelope xmlns:xsi=\"http://www.w3c.org/2001/XML-Schema-Instance\" xmlns:SOAP=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:eb=\"http://www.oasis-open.org/committees/ebxml-msg/schema/msg-header-2_0.xsd\" xmlns:hl7ebxml=\"urn:hl7-org:transport/ebxml/DSTUv1.0\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><SOAP:Header><eb:MessageHeader SOAP:mustUnderstand=\"1\" eb:version=\"2.0\"><eb:From><eb:PartyId eb:type=\"urn:nhs:names:partyType:ocs+serviceInstance\">RHM-812580</eb:PartyId></eb:From><eb:To><eb:PartyId eb:type=\"urn:nhs:names:partyType:ocs+serviceInstance\">YES-0000806</eb:PartyId></eb:To><eb:CPAId>S20002A000236</eb:CPAId><eb:ConversationId>' + pm.variables.get(\"HL7messageGUID\") + '</eb:ConversationId><eb:Service>urn:nhs:names:services:pds</eb:Service><eb:Action>PRPA_IN000200UK03</eb:Action><eb:MessageData><eb:MessageId>' + pm.variables.get(\"HL7messageGUID\") + '</eb:MessageId><eb:Timestamp>2020-05-12T08:23:49</eb:Timestamp></eb:MessageData><eb:DuplicateElimination/></eb:MessageHeader><eb:AckRequested eb:version=\"2.0\" SOAP:mustUnderstand=\"1\" SOAP:actor=\"urn:oasis:names:tc:ebxml-msg:actor:toPartyMSH\" eb:signed=\"false\"/><eb:SyncReply eb:version=\"2.0\" SOAP:mustUnderstand=\"1\" SOAP:actor=\"http://schemas.xmlsoap.org/soap/actor/next\"/></SOAP:Header><SOAP:Body><eb:Manifest eb:version=\"2.0\"><eb:Reference xlink:href=\"cid:31321d7e-d449-40f2-8362-6598c5b3ffae\"><eb:Schema eb:location=\"http://www.nhsia.nhs.uk/schemas/HL7-Message.xsd\" eb:version=\"1.0\"/><eb:Description xml:lang=\"en\">HL7 payload</eb:Description><hl7ebxml:Payload style=\"HL7\" encoding=\"XML\" version=\"3.0\"/></eb:Reference></eb:Manifest></SOAP:Body></SOAP:Envelope>' + '\\n\\n' + '----=_MIME-Boundary' + '\\n' + 'Content-Id: <31321d7e-d449-40f2-8362-6598c5b3ffae>' + '\\n' + 'Content-Type: application/xml; charset=UTF-8' + '\\n' + 'Content-Transfer-Encoding: 8bit' + '\\n\\n' + '<?xml version=\"1.0\" encoding=\"UTF-8\"?><PRPA_IN000200UK03 xmlns=\"urn:hl7-org:v3\"><id root=\"' + pm.variables.get(\"HL7rootGUID\") + '\"/><creationTime value=\"20200512082349\"/><versionCode code=\"V3NPfIT4.2.00\"/><interactionId extension=\"PRPA_IN000200UK03\" root=\"2.16.840.1.113883.2.1.3.2.4.12\"/><processingCode code=\"P\"/><processingModeCode code=\"T\"/><acceptAckCode code=\"NE\"/><communicationFunctionRcv><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"928942012545\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionRcv><communicationFunctionSnd><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionSnd><ControlActEvent classCode=\"CACT\" moodCode=\"EVN\"><author1 typeCode=\"AUT\"><AgentSystemSDS classCode=\"AGNT\"><agentSystemSDS classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></agentSystemSDS></AgentSystemSDS></author1><subject>\t\t\t<PdsRegistrationRequest classCode=\"REG\" moodCode=\"RQO\"><author typeCode=\"AUT\"><registeringAuthority classCode=\"ASSIGNED\"><code code=\"c\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.16.20\" /><id root=\"1.2.826.0.1285.0.2.1.54\" extension=\"TEST\" /></registeringAuthority></author><subject typeCode=\"SBJ\"><patientRole classCode=\"PAT\"><addr use=\"H\"><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><streetAddressLine>testing</streetAddressLine><postalCode>' + pm.variables.get(\"postCode\") + '</postalCode></addr><patientPerson classCode=\"PSN\" determinerCode=\"INSTANCE\"><administrativeGenderCode code=\"2\" /><birthTime value=\"' + pm.variables.get(\"birthTime\") + '\" /><name use=\"L\">' + getGivenName() + '<family>' + pm.variables.get(\"family\") + '</family><prefix>Mr</prefix><suffix>Bsc</suffix></name><languageCommunication><languageCode code=\"hy\" /><preferenceInd value=\"true\" /><proficiencyLevelCode code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.16.39\" /></languageCommunication></patientPerson><subjectOf5 typeCode=\"SBJ\"><previousNhsContact classCode=\"OBS\" moodCode=\"EVN\"><code code=\"17\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.35\" /><value code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.38\" /></previousNhsContact></subjectOf5></patientRole></subject></PdsRegistrationRequest></subject></ControlActEvent></PRPA_IN000200UK03>' + '\\n\\n' + '----=_MIME-Boundary--')\r",
									"\r",
									"\r",
									"\r",
									"function getGivenName() {\r",
									"    if(givenName) {\r",
									"        return '<given>' + givenName + '</given>';\r",
									"    }\r",
									"}\r",
									"\r",
									"};\r",
									"pm.globals.set(\"BuildHL7Patient\", BuildHL7Patient.toString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f50e2629-61a4-4a47-bd81-f37a3204a6c5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "{{nhsd-asid-header}}",
								"type": "text",
								"value": "{{from_asid}}"
							},
							{
								"key": "{{nhsd-session-urid-header}}",
								"type": "text",
								"value": "{{role_id}}"
							},
							{
								"key": "{{nhsd-identity-uuid-header}}",
								"type": "text",
								"value": "{{user_id}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						},
						"description": "Testing the correct url is returned on an error response"
					},
					"response": []
				},
				{
					"name": "PDS Search & Retrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1117c2a5-56e1-476f-a4ef-a3f9233b609f",
								"exec": [
									"/*This function Sends a PDS Search request to obbtain the Patient nhs Id & patient record version Id\r",
									"====================================================================================================*/\r",
									"\r",
									"var SendPDSSearch = () => {\r",
									"    setTimeout(function () {\r",
									"        var Header = require('postman-collection').Header;\r",
									"        let asidHeader = pm.variables.get(\"asidHeader\");\r",
									"        let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
									"        let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
									"        let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + \"/Patient?family=\" + pm.variables.get(\"family\") + \"&gender=female&birthdate=\" + pm.variables.get(\"birthDate\"),\r",
									"            method: 'GET',\r",
									"            header: { authorization, asidHeader, sessionURIDHeader, identityUUIDHeader }\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check PDS Search returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            pm.globals.set(\"nhsID\", response.json().entry[0].resource.id);\r",
									"            pm.globals.set(\"metaVersionId\", 'W/\"' + response.json().entry[0].resource.meta.versionId + '\"')\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().entry[0].resource.meta.versionId));\r",
									"            pm.variables.set(\"name.id\", response.json().entry[0].resource.name[0].id);            \r",
									"            console.log(\"meta version id of Patient is: \" + pm.globals.get(\"metaVersionId\"))\r",
									"            console.log(\"nhs id of Patient is: \" + pm.globals.get(\"nhsID\"))\r",
									"        });\r",
									"    }, 3000);\r",
									"}\r",
									"\r",
									"pm.globals.set(\"SendPDSSearch\", SendPDSSearch.toString());\r",
									"\r",
									"\r",
									"/*Send a PDS Retrieve request to obbtain the Patient patient record version Id.\r",
									"=============================================================================*/\r",
									"\r",
									"var SendPDSRetrieve = () => {\r",
									"    setTimeout(function () {\r",
									"        var Header = require('postman-collection').Header;\r",
									"        let asidHeader = pm.variables.get(\"asidHeader\");\r",
									"        let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
									"        let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
									"        let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + \"/Patient/\" + pm.globals.get(\"nhsID\"),\r",
									"            method: 'GET',\r",
									"            header: { authorization, asidHeader, sessionURIDHeader, identityUUIDHeader }\r",
									"\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check PDS Retrieve returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            pm.globals.set(\"metaVersionId\", response.headers.get('Etag'));\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().meta.versionId));\r",
									"            console.log(\"Patient record version is: \" + pm.variables.get(\"versionId\"));\r",
									"            console.log(\"Patient record version is: \" + pm.globals.get(\"metaVersionId\"));\r",
									"            pm.variables.set(\"pdsRetrieveResponse\", response.json())\r",
									"            pm.environment.set(\"pdsRetrieveCounter\", 2)\r",
									"            console.log(pm.environment.get(\"pdsRetrieveCounter\"))\r",
									"        })\r",
									"    }, 1000);\r",
									"};\r",
									"pm.globals.set(\"SendPDSRetrieve\", SendPDSRetrieve.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildAndSendHL7RetreivePatient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dcd90f8a-1956-49f3-9e86-6d861b5c2851",
								"exec": [
									"/*This function builds and sends a HL7 Retrieve request and saves the response to a global variable: \"HL7RetrieveResponse\" for the purposes of asserting the payload\r",
									"====================================================================================================================================================================*/\r",
									"\r",
									"var SendHL7RetrievePatientMessage = () => {\r",
									"    setTimeout(function () {\r",
									"        pm.globals.set(\"HL7RetrievePatientMessage\", '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsa=\"http://schemas.xmlsoap.org/ws/2004/08/addressing\" xmlns:hl7=\"urn:hl7-org:v3\"><SOAP-ENV:Header><wsa:MessageID>uuid:82CC8716-71B7-44F3-B885-B18DD08B31AE</wsa:MessageID><wsa:Action>urn:nhs:names:services:pdsquery/QUPA_IN000008UK05</wsa:Action><wsa:To>https://10.239.9.7/sync-service</wsa:To><wsa:From><wsa:Address>10.210.164.11</wsa:Address></wsa:From><hl7:communicationFunctionRcv><hl7:device><hl7:id root=\"1.2.826.0.1285.0.2.0.107\" extension=\"928942012545\"/></hl7:device></hl7:communicationFunctionRcv><hl7:communicationFunctionSnd><hl7:device><hl7:id root=\"1.2.826.0.1285.0.2.0.107\" extension=\"230705069519\"/></hl7:device></hl7:communicationFunctionSnd><wsa:ReplyTo><wsa:Address>10.210.164.11</wsa:Address></wsa:ReplyTo></SOAP-ENV:Header><SOAP-ENV:Body><QUPA_IN000008UK05 xmlns=\"urn:hl7-org:v3\"><id root=\"D3C68B29-9533-45D6-837C-3375CFFE07D1\"/><creationTime value=\"20200511140552\"/><versionCode code=\"V3NPfIT4.2.00\"/><interactionId extension=\"QUPA_IN000008UK05\" root=\"2.16.840.1.113883.2.1.3.2.4.12\"/><processingCode code=\"P\"/><processingModeCode code=\"T\"/><acceptAckCode code=\"NE\"/><communicationFunctionRcv><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"928942012545\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionRcv><communicationFunctionSnd><device classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></device></communicationFunctionSnd><ControlActEvent classCode=\"CACT\" moodCode=\"EVN\"><author1 typeCode=\"AUT\"><AgentSystemSDS classCode=\"AGNT\"><agentSystemSDS classCode=\"DEV\" determinerCode=\"INSTANCE\"><id extension=\"230705069519\" root=\"1.2.826.0.1285.0.2.0.107\"/></agentSystemSDS></AgentSystemSDS></author1><query><historicDataIndicator><semanticsText>HistoricDataIndicator</semanticsText><value code=\"0\" codeSystem=\"2.16.840.1.113883.2.1.3.2.4.17.36\"/></historicDataIndicator><person.id><semanticsText>Person.id</semanticsText><value root=\"2.16.840.1.113883.2.1.4.1\" extension=\"' + pm.globals.get(\"nhsID\") + '\"/></person.id><retrievalItem><semanticsText>person.allData</semanticsText></retrievalItem></query></ControlActEvent></QUPA_IN000008UK05></SOAP-ENV:Body></SOAP-ENV:Envelope>')\r",
									"\r",
									"        var Header = require('postman-collection').Header;\r",
									"\r",
									"        /*set message headers*/\r",
									"        let contentType = new Header({\r",
									"            key: 'Content-Type',\r",
									"            value: 'application/xml'\r",
									"        });\r",
									"        let SOAPAction = 'urn:nhs:names:services:pdsquery/QUPA_IN000008UK05'\r",
									"\r",
									"        /*set message body*/\r",
									"        var xmlBody = pm.globals.get(\"HL7RetrievePatientMessage\")\r",
									"\r",
									"        /*send request with pre-defined headers and body*/\r",
									"\r",
									"        pm.sendRequest({\r",
									"            url: pm.environment.get(\"environment\") + '/reliablemessaging/reliablerequest',\r",
									"            method: 'POST',\r",
									"            header: { contentType, SOAPAction },\r",
									"            body: xmlBody\r",
									"        }, function (err, response) {\r",
									"            pm.test(\"Check HL7 Retrieve Patient returns Status code 200 \", () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"            });\r",
									"            var response = xml2Json(response.text());\r",
									"            pm.globals.set(\"HL7RetrieveResponse\", response)\r",
									"            console.log(pm.globals.get(\"HL7RetrieveResponse\"))\r",
									"        })\r",
									"    }, 1000);\r",
									"};\r",
									"pm.globals.set(\"SendHL7RetrievePatientMessage\", SendHL7RetrievePatientMessage.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3af90b81-83aa-4876-8a52-8d2d7a6a520c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "SOAPAction",
								"type": "text",
								"value": "urn:nhs:names:services:pdsquery/QUPA_IN000008UK05"
							}
						],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "BuildMeAPatch",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0534e053-7e3e-4ef9-ad0a-51a6d4f936d3",
								"exec": [
									"/* this function builds patches for the purposes of using in PDS Update patch requests when needed.  Each patch gets saved to a variable that is then called by createMeAPatchRequest\r",
									"=====================================================================================================================================================*/\r",
									"\r",
									"pm.globals.set('BuildMeAPatch', function BuildMeAPatch() {\r",
									"\r",
									"       addDeathNotificationPatch = () => {\r",
									"               let addDeathNotificationPatch = '{ \"patches\": [\t{ \"op\": \"add\", \"path\": \"/deceasedDateTime\", \"value\": \"2020-01-01\" }, { \"op\": \"add\", \"path\": \"/extension/-\", \"value\": { \"extension\": [ { \"url\": \"deathNotificationStatus\", \"valueCodeableConcept\": { \"coding\": [ { \"code\": \"1\", \"display\": \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\", \"system\": \"https://fhir.hl7.org.uk/CodeSystem/UKCore-DeathNotificationStatus\", \"version\": \"1.0.0\" } ] } }, { \"url\": \"systemEffectiveDate\", \"valueDateTime\": \"2020-02-27T16:14:58+00:00\" } ], \"url\": \"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-DeathNotificationStatus\" } } ] }'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addDeathNotificationPatch.toString());\r",
									"       }\r",
									"\r",
									"        addMSAndDDPatch = () => {\r",
									"              let addMSAndDDPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"value\":\"C81621\"}}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addMSAndDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPAndMASPatch = () => {\r",
									"                let addNPAndMASPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"}}}}]}'\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPAndMSAndDDPatch = () => {\r",
									"            let addNPAndMSAndDDPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\",\"valueReference\":{\"identifier\":{\"value\":\"C81621\"}}}},{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\",\"valueReference\":{\"identifier\":{\"value\":\"FYR20\"}}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addNPAndMSAndDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        addNPPatch = () => {\r",
									"            let addNPPatch = '{\"patches\":[{\"op\":\"add\",\"path\":\"/extension/-\",\"value\":{\"url\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy\",\"valueReference\":{\"identifier\":{\"system\":\"https://fhir.nhs.uk/Id/ods-organization-code\",\"value\":\"Y12345\"}}}}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", addNPPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeDDPatch = () => {\r",
									"            let removeDDPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"        pm.variables.set(\"pdsPatch\", removeDDPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeMASPatch = () => {\r",
									"            let removeMASPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeNPPatch = () => {\r",
									"            let removeNPPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeNPPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeNPAndMASPatch = () => {\r",
									"            let removeNPAndMASPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy\"},{\"op\":\"remove\",\"path\":\"/extension/0\"},{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeNPAndMASPatch.toString());\r",
									"        }\r",
									"\r",
									"        removeMASAndDDPatch = () => {\r",
									"            let removeMASAndDDPatch = '{\"patches\":[{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\"},{\"op\":\"remove\",\"path\":\"/extension/0\"},{\"op\":\"test\",\"path\":\"/extension/0/url\",\"value\":\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\"},{\"op\":\"remove\",\"path\":\"/extension/0\"}]}'\r",
									"/*generalPractitioner mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test('generalPractitioner is not displayed for Sensitive Patient', () => {\r",
									"        pm.expect(response.entry[0].resource.generalPractitioner).to.be.undefined;\r",
									"    })\r",
									"} else {\r",
									"    pm.test(\"generalPractitioner has been mapped correctly\", function () {\r",
									"        console.log(\"expected generalPractitionerValue = \" + (pm.variables.get(\"\")));\r",
									"        console.log(\"returned generalPractitionerValue = \" + (JSON.stringify(response.entry[0].resource.generalPractitioner)));\r",
									"        var generalPractitionerValueExists = (pm.variables.get(\"generalPractitionerValue\"));\r",
									"        if (!generalPractitionerValueExists) {\r",
									"            console.log(\"if generalPractitionerValue doesnt exist then there should be no generalPractice returned = \" + response.entry[0].resource.generalPractitioner);\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.generalPractitioner)).to.eql(undefined);\r",
									"        }\r",
									"        else if (generalPractitionerValueExists) {\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"        }\r",
									"        pm.variables.unset(\"generalPractitionerValue\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"        pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"    });\r",
									"}\r",
									"\r",
									"/*extention items*/\r",
									"\r",
									"         pm.variables.set(\"pdsPatch\", removeMASAndDDPatch.toString());\r",
									"        }\r",
									"} + '; BuildMeAPatch();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateMeAPatchRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f1334c7d-d1bd-47d1-bf70-7dd99ebc6e40",
								"exec": [
									"/* This function creates Patch requests to be used as pm.send requests for the purposes of pre-requisites.\r",
									"=========================================================================================================*/\r",
									"\r",
									"\r",
									"var createMeAPatchRequest = () => {\r",
									"\r",
									"    var Header = require('postman-collection').Header;\r",
									"    let asidHeader = pm.environment.get(\"asidHeader\");\r",
									"    let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
									"    let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
									"    let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"    let contentType = new Header({ key: 'Content-Type', value: 'application/json-patch+json' });\r",
									"    let ifMatch = new Header({ key: 'If-Match', value: pm.globals.get(\"metaVersionId\") });\r",
									"    let pdsPatch = pm.variables.get(\"pdsPatch\");\r",
									"\r",
									"\r",
									"    pm.sendRequest({\r",
									"        url: pm.environment.get(\"environment\") + '/Patient/' + pm.globals.get(\"nhsID\"),\r",
									"        method: 'PATCH',\r",
									"        header: {\r",
									"            authorization,\r",
									"            asidHeader,\r",
									"            sessionURIDHeader,\r",
									"            identityUUIDHeader,\r",
									"            contentType,\r",
									"            ifMatch\r",
									"        },\r",
									"        body: pdsPatch\r",
									"\r",
									"    }, function (err, response) {\r",
									"        pm.test(\"Returns Status code 200\", function () {\r",
									"            pm.expect(response.code).to.equal(202);\r",
									"        });\r",
									"\r",
									"    });\r",
									"\r",
									"}\r",
									"pm.globals.set(\"createMeAPatchRequest\", createMeAPatchRequest.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "relatedPersonMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "da134c92-072c-4b82-a275-ba9e44f53271",
								"exec": [
									"var relatedPersonMappings = () => {\r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].given).to.eql(pm.variables.get(\"relatedPersonGiven\"));\r",
									"});\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].family).to.eql(pm.variables.get(\"relatedPersonFamily\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"relatedPersonPrefix\")) {\r",
									"            pm.expect(response.entry[0].resource.name[0].prefix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"            pm.expect(response.entry[0].resource.name[0].prefix[0]).to.eql(pm.variables.get(\"relatedPersonPrefix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"relatedPersonSuffix\")  === undefined ) {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.name[0].suffix).to.eql(pm.variables.get(\"relatedPersonSuffix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'use' has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.name[0].use).to.eql(\"usual\");\r",
									"});\r",
									"\r",
									"/*Check Patient use has been populated properly*/\r",
									"pm.test(\"Patient has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.patient.type).to.eql(\"Patient\");\r",
									"   \r",
									"   if (pm.variables.get(\"relatedPersonPatientID\")) {\r",
									"      pm.expect(response.entry[0].resource.patient.reference).to.eql(\"https://api.service.nhs.uk/Patient/\" + pm.variables.get(\"relatedPersonPatientID\"));\r",
									"      pm.expect(response.entry[0].resource.patient.identifier.system).to.eql(\"https://api.service.nhs.uk\");\r",
									"      pm.expect(response.entry[0].resource.patient.identifier.value).to.eql(pm.variables.get(\"relatedPersonPatientID\"));\r",
									"   }\r",
									"   else {\r",
									"      pm.expect(response.entry[0].resource.patient.reference).to.eql(undefined);\r",
									"      pm.expect(response.entry[0].resource.patient.identifier).to.eql(undefined);\r",
									"   }\r",
									"});\r",
									"\r",
									"/*Check Period Start has been populated properly*/\r",
									"pm.test(\"Period Start has been mapped correctly\", function () {\r",
									"   pm.expect(response.entry[0].resource.period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check Period End has been populated properly*/\r",
									"pm.test(\"Period End has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"relatedPersonPeriodEnd\")){\r",
									"        pm.expect(response.entry[0].resource.period.end).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.period.end).to.eql(pm.variables.get(\"relatedPersonPeriodEnd\"));\r",
									"    }\r",
									"});\r",
									"\r",
									" \r",
									"/*Check Relationship has been populated properly*/\r",
									"pm.test(\"Relationship has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"relatedPersonRelationshipType\") == \"brother\") {\r",
									"            pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"BRO\");\r",
									"            pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"brother\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"child\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"CHILD\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"child\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"partner\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"DOMPART\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"domestic partner\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"relative\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"FAMMEMB\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"family member\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"father\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"FTH\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"father\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"mother\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"MTH\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"mother\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"next of kin\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"N\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"Next-of-Kin\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipType\") == \"parent\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].code).to.eql(\"PRN\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[0].display).to.eql(\"parent\");\r",
									"    }\r",
									"    else pm.expect.fail(\"relationshipType not been mapped correctly\");\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.relationship[0].coding[0].system).to.eql(\"http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype\");\r",
									"    \r",
									"    if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Agent\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Agent\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Agent of patient\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Guardian\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Guardian\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Guardian of patient\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonRelationshipClass\")  == \"Personal relationship\") {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].code).to.eql(\"Personal\");\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[1].display).to.eql(\"Personal relationship with the patient\");\r",
									"    }\r",
									"    else pm.expect.fail(\"relationshipClass not been mapped correctly\");\r",
									"    \r",
									"    pm.expect(response.entry[0].resource.relationship[0].coding[1].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/UKCore-AdditionalRelatedPersonRole\");\r",
									"    \r",
									"    if  (pm.variables.get(\"relatedPersonRelationshipNOKDisplay\")) {\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].code).to.eql(pm.variables.get(\"relatedPersonRelationshipNOKCode\"));\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].display).to.eql(pm.variables.get(\"relatedPersonRelationshipNOKDisplay\"));\r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2].system).to.eql(\"http://hl7.org/fhir/ValueSet/relatedperson-relationshiptype\");\r",
									"    }\r",
									"   else \r",
									"        pm.expect(response.entry[0].resource.relationship[0].coding[2]).to.eql(undefined);\r",
									"});\r",
									"\r",
									"/*Check resourceType has been populated properly*/\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.entry[0].resource.resourceType).to.eql(\"RelatedPerson\");\r",
									"});\r",
									"\r",
									"/*Check Telecom Use has been mapped correctly*/\r",
									"pm.test(\"Telecom Use has been mapped correctly\", function () {    \r",
									"    let telecomUse;\r",
									"    switch (pm.variables.get(\"relatedPersontelecomUse\").toLowerCase()) {\r",
									"        case 'home':\r",
									"        case 'answering machine':\r",
									"            telecomUse = \"home\";\r",
									"            break;\r",
									"        case 'work':\r",
									"        case 'mobile':\r",
									"            telecomUse = pm.variables.get(\"relatedPersontelecomUse\");\r",
									"            break;\r",
									"        case 'pager':\r",
									"            telecomUse = \"mobile\";\r",
									"            break;\r",
									"        case 'temporary':\r",
									"            telecomUse = \"temp\";\r",
									"            break;\r",
									"    }\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomUse\") == \"emergency\") {\r",
									"        console.log(\"here\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].use).to.eql(undefined, \"invalid telecomUse\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].period).to.eql(undefined);\r",
									"    }\r",
									"\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].period.start).to.eql((pm.variables.get(\"relatedPersontelecomPeriodStart\")));\r",
									"    }\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomValue\")) {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].value).to.eql((pm.variables.get(\"relatedPersontelecomValue\")));\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].value).to.eql(undefined);\r",
									"    }       \r",
									"});\r",
									"\r",
									"/*Check Telecom System has been mapped correctly*/\r",
									"pm.test(\"Telecom System has been mapped correctly\", function () {\r",
									"    let telecomType;\r",
									"\r",
									"    switch (pm.variables.get(\"relatedPersontelecomType\").toLowerCase()) {\r",
									"        case 'telephone':\r",
									"            telecomType = \"phone\";\r",
									"            break;\r",
									"        case 'fax':\r",
									"        case 'email':\r",
									"            telecomType = pm.variables.get(\"relatedPersontelecomType\");\r",
									"            break;\r",
									"        case 'textphone':\r",
									"            telecomType = \"other\";\r",
									"            break;\r",
									"        default:\r",
									"            pm.expect.fail(\"telecomType mapping failure\");\r",
									"            break;\r",
									"    }\r",
									"    pm.expect(response.entry[0].resource.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersontelecomType\").toLowerCase() == \"textphone\") {\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"        pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"    }\r",
									"});\r",
									"\r",
									"//Check Address Related items\r",
									"pm.test(\"Address has been mapped correctly\", function () {\r",
									"      \r",
									"      if (pm.variables.get(\"relatedPersonAddressLine\")) {\r",
									"          pm.expect(JSON.stringify(response.entry[0].resource.address[0].line)).to.eql(pm.variables.get(\"relatedPersonAddressLine\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].period.start).to.eql(pm.variables.get(\"relatedPersonPeriodStart\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].postalCode).to.eql(pm.variables.get(\"relatedPersonPostalCode\"));\r",
									"          pm.expect(response.entry[0].resource.address[0].use).to.eql(\"home\");\r",
									"      }\r",
									"      else \r",
									"          pm.expect(response.entry[0].resource.address).to.eql(undefined);\r",
									"    });\r",
									"\r",
									"//Check CorrespondenceIndicator Related items\r",
									"pm.test(\"CorrespondenceIndicator has been mapped correctly\", function () {\r",
									"    var CorrespondenseIndicator = getCorrespondenseIndicator();\r",
									"    \r",
									"    if ((pm.variables.get(\"relatedPersonCorrespondenceIndicator\") == \"no\") || (pm.variables.get(\"relatedPersonCorrespondenceIndicator\") === undefined)) {\r",
									"        pm.expect(CorrespondenseIndicator).to.eql(undefined);\r",
									"    }\r",
									"    else if (pm.variables.get(\"relatedPersonCorrespondenceIndicator\") == \"yes\") {\r",
									"        pm.expect(CorrespondenseIndicator.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-CopyCorrespondenceIndicator\");\r",
									"        pm.expect(CorrespondenseIndicator.valueBoolean).to.eql(true);\r",
									"    }\r",
									"   else pm.expect.fail(\"Correspondence Indicator has not been mapped correctly\");\r",
									"});\r",
									"\r",
									"//Check Contact Preference \r",
									"pm.test(\"Contact Preferred Method has been mapped correctly\", function () {\r",
									"    var contactPreference = getContactPreference();\r",
									"    \r",
									"    if (contactPreference) {\r",
									"        pm.expect(contactPreference.url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-ContactPreference\");\r",
									"        pm.expect(contactPreference.extension[0].url).to.eql(\"PreferredContactMethod\");\r",
									"        \r",
									"        if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"email\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"4\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"E-mail\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"letter\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Letter\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"minicom\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"5\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Minicom (Textphone)\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"not telephone contact\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"8\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"No Telephone contact\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"sign language\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"7\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Sign Language\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"telephone\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"3\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Telephone\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"telephone via proxy\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"6\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Telephone contact via proxy\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredContactMethod\") == \"visit\") {\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].code).to.eql(\"2\");\r",
									"            pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Visit\");\r",
									"        }\r",
									"        else pm.expect.fail(\"preferred contact method has not been mapped correctly\");\r",
									"\r",
									"        pm.expect(contactPreference.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-PreferredContactMethod\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Contact Preferred Time has been mapped correctly\", function () {\r",
									"    var PreferredContactTimes = getContactPreferredTimes();\r",
									"    \r",
									"    if (pm.variables.get(\"relatedPersonPreferredContactTime\")) {\r",
									"        pm.expect(PreferredContactTimes.url).to.eql(\"PreferredContactTimes\");\r",
									"        pm.expect(PreferredContactTimes.valueString).to.eql(pm.variables.get(\"relatedPersonPreferredContactTime\"));\r",
									"    }\r",
									"    else if (!pm.variables.get(\"relatedPersonPreferredContactTime\")) {\r",
									"        pm.expect(PreferredContactTimes).to.eql(undefined)\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Contact Preferred Format has been mapped correctly\", function () {\r",
									"    var ContactPreferredCommsFormat = getContactPreferredCommsFormat();\r",
									"\r",
									"    if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\")) {\r",
									"        pm.expect(ContactPreferredCommsFormat.url).to.eql(\"PreferredWrittenCommunicationFormat\");\r",
									"        pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-PreferredWrittenCommunicationFormat\");\r",
									"        \r",
									"        if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Large print\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"11\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Large print\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Braille\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"12\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Braille\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\") == \"Audio tape\") {\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].code).to.eql(\"13\");\r",
									"            pm.expect(ContactPreferredCommsFormat.valueCodeableConcept.coding[0].display).to.eql(\"Audio tape\");\r",
									"        }\r",
									"        else pm.expect.fail(\"preferred contact format has not been mapped correctly\");\r",
									"    }\r",
									"    else if (!pm.variables.get(\"relatedPersonPreferredWrittenCommsFormat\")) {\r",
									"        pm.expect(ContactPreferredCommsFormat).to.eql(undefined)\r",
									"    }\r",
									"}); \r",
									"\r",
									"//Check language Related items\r",
									"pm.test(\"language Extention has been mapped correctly\", function () {\r",
									"    var languageExtension = getLanguageExtention(response.entry[0].resource.extension);\r",
									"    if (!pm.variables.get(\"relatedPersonLanguage\")) {\r",
									"        pm.expect(languageExtension).to.eql(undefined);\r",
									"    }\r",
									"    \r",
									"    else if (pm.variables.get(\"relatedPersonLanguage\")) {\r",
									"        pm.expect(languageExtension.extension[0].url).to.eql(\"language\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-HumanLanguage\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"        pm.expect(languageExtension.extension[1].url).to.eql(\"interpreterRequired\");\r",
									"        pm.expect(languageExtension.extension[1].valueBoolean).to.eql(pm.variables.get(\"relatedPersonInterpreter\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].code).to.eql(pm.variables.get(\"relatedPersonLanguage\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].display).to.eql(pm.variables.get(\"relatedPersonLanguageDisplay\"));\r",
									"    }\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Rank Extention has been mapped correctly\", function () {\r",
									"    var ContactRankExtension = getContactRankExtension(response.entry[0].resource.extension);\r",
									"\r",
									"    \r",
									"    if (!(pm.variables.get(\"relatedPersonRank1\"))) {\r",
									"        pm.expect(ContactRankExtension).to.eql(undefined);\r",
									"    }\r",
									"    \r",
									"    else if (pm.variables.get(\"relatedPersonRank\")) {\r",
									"        pm.expect(ContactRankExtension.url).to.eql(\"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactRank\");\r",
									"        pm.expect(ContactRankExtension.valuePositiveInt).to.eql(pm.variables.get(\"relatedPersonRank1\"));\r",
									"    }\r",
									"    \r",
									"});\r",
									"\r",
									"function getContactRankExtension(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"    \t\t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-ContactRank\") {\r",
									"    \t\t\t\treturn extensions;\r",
									"    \t\t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getCorrespondenseIndicator(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"        \t\tif (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-CopyCorrespondenceIndicator\") {\r",
									"        \t\t\treturn extensions;\r",
									"        \t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"function getLanguageExtention(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"language\") {\r",
									"                        return extensions;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreference(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"    \t\t\tif (extensions.url == \"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-ContactPreference\") {\r",
									"    \t\t\t\treturn extensions;\r",
									"    \t\t\t}\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreferredTimes(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"PreferredContactTimes\") {\r",
									"                        return e;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"            }\r",
									"    }\r",
									"}\r",
									"\r",
									"function getContactPreferredCommsFormat(extensions) {\r",
									"    \r",
									"    if (response.entry[0].resource.extension) {\r",
									"        for (let extensions of response.entry[0].resource.extension) {\r",
									"            try {\r",
									"                    for (let e of extensions.extension) {\r",
									"                        if (e.url == \"PreferredWrittenCommunicationFormat\") {\r",
									"                        return e;\r",
									"                        }       \r",
									"                     }\r",
									"                } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"}\r",
									"pm.variables.unset(\"relatedPersonPrefix\");\r",
									"pm.variables.unset(\"relatedPersonSuffix\");\r",
									"pm.variables.unset(\"relatedPersonLanguage\");\r",
									"pm.variables.unset(\"relatedPersonPreferredContactTime\");\r",
									"pm.variables.unset(\"relatedPersonLanguageDisplay\");    \r",
									"pm.variables.unset(\"relatedPersonInterpreter\");   \r",
									"pm.variables.unset(\"relatedPersonRelationshipNOKCode\");\r",
									"pm.variables.unset(\"relatedPersonRelationshipNOKDisplay\");\r",
									"pm.variables.unset(\"relatedPersonRelationshipType\");\r",
									"pm.variables.unset(\"relatedPersonAddressLine\");\r",
									"pm.variables.unset(\"relatedPersonPreferredWrittenCommsFormat\");\r",
									"pm.variables.unset(\"relatedPersonPatientID\");\r",
									"\r",
									"};\r",
									"\r",
									"\r",
									"pm.globals.set(\"relatedPersonMappings\", relatedPersonMappings.toString());\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkSearchMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "50abad77-71ac-4b95-86d2-87002e5a2cef",
								"exec": [
									"/*functions*/\r",
									"var checkSearchMappings = () => {\r",
									"\r",
									"    /*Resource Type mapping function*/\r",
									"\r",
									"    pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*Patient id mapping function*/\r",
									"    pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*Identifier Value mapping function*/\r",
									"    pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"\r",
									"        pm.expect(response.entry[0].resource.identifier[0].extension[0].url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"        pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"        pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"        pm.expect(response.entry[0].resource.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"        pm.expect(response.entry[0].resource.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*Meta version id mapping function\r",
									"    pm.test(\"Meta 'versionId' has been mapped correctly\", function () {\r",
									"        console.log(\"expected metaVersionId = \" + (pm.variables.get(\"metaVersionId\")));\r",
									"        console.log(\"returned metaVersionId = \" + (response.entry[0].resource.meta.versionId));\r",
									"        pm.expect(response.entry[0].resource.meta.versionId).to.eql(pm.variables.get(\"metaVersionId\"));\r",
									"        }\r",
									"    );*/\r",
									"\r",
									"    /*Check Name Related items*/\r",
									"\r",
									"    /*Check family has been populated properly*/\r",
									"    pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"    });\r",
									"\r",
									"    /*Check given has been populated properly*/\r",
									"    pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"    });\r",
									"\r",
									"    /*Check prefix has been populated properly*/\r",
									"    pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"    });\r",
									"\r",
									"    /*Check suffix has been populated properly*/\r",
									"    pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"suffix\") === undefined) {\r",
									"            pm.expect(response.entry[0].resource.name[0].suffix).to.eql(undefined);\r",
									"        }\r",
									"        else {\r",
									"            pm.expect(response.entry[0].resource.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"        }\r",
									"        pm.variables.unset(\"suffix\");\r",
									"    }\r",
									"\r",
									"    );\r",
									"\r",
									"    /*Check name use has been populated properly*/\r",
									"    pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.entry[0].resource.name[0].use).to.eql(\"usual\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"temp\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"nickname\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"old\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.entry[0].resource.name[1].use).to.eql(\"maiden\");\r",
									"        }\r",
									"        else pm.expect.fail(\"fail\");\r",
									"    });\r",
									"\r",
									"\r",
									"    /*Check name start date has been populated properly*/\r",
									"    pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"    });\r",
									"\r",
									"    // Check birth order is populated correctly\r",
									"    pm.test(\"Birth Order is returned\", () => {\r",
									"        if (pm.variables.has(\"expectedBirthOrder\")) {\r",
									"            pm.expect(response.entry[0].resource.multipleBirthInteger).to.eq(pm.variables.get(\"expectedBirthOrder\"));\r",
									"        }\r",
									"    });\r",
									"    pm.variables.unset(\"expectedBirthOrder\");\r",
									"\r",
									"    /*gender mapping function*/\r",
									"    pm.test(\"Gender has been mapped correctly\", function () {\r",
									"        if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"female\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"male\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"unknown\");\r",
									"        }\r",
									"        else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.entry[0].resource.gender).to.eql(\"other\");\r",
									"        }\r",
									"        else pm.expect.fail(\"fail\");\r",
									"    });\r",
									"\r",
									"    /*Birthday mapping function*/\r",
									"    pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"        pm.expect(response.entry[0].resource.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									"    );\r",
									"\r",
									"    /*deceasedDateTime mapping function*/\r",
									"    pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"        let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"        if (!deceasedDateTimeExists) {\r",
									"            pm.expect(response.entry[0].resource.deceasedDateTime).to.eql(undefined);\r",
									"        }\r",
									"        else if (deceasedDateTimeExists) {\r",
									"            pm.expect((response.entry[0].resource.deceasedDateTime).substring(0, 10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"        }\r",
									"        pm.variables.unset(\"deceasedDateTime\");\r",
									"    });\r",
									"\r",
									"    /*Check Address Related items*/\r",
									"\r",
									"    /*address line mapping function*/\r",
									"    if (pm.variables.get(\"s-flagged\")) {\r",
									"        pm.test('Address is not displayed for Sensitive Patient', () => {\r",
									"            pm.expect(response.entry[0].resource.address).to.be.undefined;\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Address has been mapped correctly\", function () {\r",
									"            pm.expect(JSON.stringify(response.entry[0].resource.address[0].line)).to.eql(pm.variables.get(\"addressLine\"));\r",
									"        }\r",
									"        );\r",
									"\r",
									"        // /*addressPeriodStart mapping function*/\r",
									"        pm.test(\"Address 'periodStart' has been mapped correctly\", function () {\r",
									"            pm.expect(response.entry[0].resource.address[0].period.start).to.eql((pm.variables.get(\"addressPeriodStart\")));\r",
									"        }\r",
									"        );\r",
									"\r",
									"        // /*addressPostCode mapping function*/\r",
									"        pm.test(\"Address 'PostCode' has been mapped correctly\", function () {\r",
									"            pm.expect(response.entry[0].resource.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"));\r",
									"        }\r",
									"        );\r",
									"\r",
									"        // /*address.use mapping function*/\r",
									"        pm.test(\"Address 'Use' has been mapped correctly\", function () {\r",
									"            pm.expect(response.entry[0].resource.address[0].use).to.eql(\"home\");\r",
									"        }\r",
									"        );\r",
									"    }\r",
									"\r",
									"    /*telecom mapping function*/\r",
									"    if (pm.variables.get(\"s-flagged\")) {\r",
									"        pm.test(\"Telecom or Contact is not displayed for Sensitive Patient\", () => {\r",
									"            pm.expect(response.entry[0].resource.telecom).to.be.undefined;\r",
									"            pm.expect(response.entry[0].resource.contact).to.be.undefined;\r",
									"        })\r",
									"    } else {\r",
									"\r",
									"        if (pm.variables.get(\"telecomType\")) {\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"            /*telecom System mapping function*/\r",
									"\r",
									"            pm.test(\"Telecom 'System' has been mapped correctly\", function () {\r",
									"                let telecomType;\r",
									"                switch (pm.variables.get(\"telecomType\").toLowerCase()) {\r",
									"                    case 'telephone':\r",
									"                        telecomType = \"phone\";\r",
									"                        break;\r",
									"                    case 'fax':\r",
									"                    case 'email':\r",
									"                        telecomType = pm.variables.get(\"telecomType\");\r",
									"                        break;\r",
									"                    case 'textphone':\r",
									"                        telecomType = \"other\";\r",
									"                        break;\r",
									"                    default:\r",
									"                        pm.expect.fail(\"telecomType mapping failure\");\r",
									"                        break;\r",
									"                }\r",
									"\r",
									"                if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                    pm.expect(response.entry[0].resource.contact[0].telecom[0].system).to.eql(telecomType)\r",
									"\r",
									"\r",
									"\r",
									"                }\r",
									"\r",
									"                else {\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"                }\r",
									"\r",
									"\r",
									"                if (pm.variables.get(\"telecomType\").toLowerCase() == \"textphone\") {\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].extension[0].url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"                }\r",
									"            });\r",
									"\r",
									"\r",
									"            /*telecom use mapping function*/\r",
									"            pm.test(\"Telecom 'Use' has been mapped correctly\", function () {\r",
									"                let telecomUse;\r",
									"                switch (pm.variables.get(\"telecomUse\").toLowerCase()) {\r",
									"                    case 'home':\r",
									"                    case 'answering machine':\r",
									"                    case 'emergency':\r",
									"                        telecomUse = \"home\";\r",
									"                        break;\r",
									"                    case 'work':\r",
									"                    case 'mobile':\r",
									"                        telecomUse = pm.variables.get(\"telecomUse\");\r",
									"                        break;\r",
									"                    case 'pager':\r",
									"                        telecomUse = \"mobile\";\r",
									"                        break;\r",
									"                    case 'temporary':\r",
									"                        telecomUse = \"temp\";\r",
									"                        break;\r",
									"                    default:\r",
									"                        pm.expect.fail(\"telecomUse mapping failure\");\r",
									"                        break;\r",
									"                }\r",
									"                if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                    pm.expect(response.entry[0].resource.contact[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                    pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].code).to.eql(\"C\");\r",
									"                    pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].display).to.eql(\"Emergency Contact\");\r",
									"                    pm.expect(response.entry[0].resource.contact[0].relationship[0].coding[0].system).to.eql(\"http://terminology.hl7.org/CodeSystem/v2-0131\");\r",
									"                    pm.expect(response.entry[0].resource.contact[0].telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"                }\r",
									"                else {\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                    pm.expect(response.entry[0].resource.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"                }\r",
									"            });\r",
									"        }\r",
									"        pm.variables.unset(\"telecomType\");\r",
									"        pm.variables.unset(\"telecomUse\");\r",
									"    }\r",
									"\r",
									"    /*generalPractitioner mapping function*/\r",
									"    if (pm.variables.get(\"s-flagged\")) {\r",
									"        pm.test('generalPractitioner is not displayed for Sensitive Patient', () => {\r",
									"            pm.expect(response.entry[0].resource.generalPractitioner).to.be.undefined;\r",
									"        })\r",
									"    } else {\r",
									"        pm.test(\"generalPractitioner has been mapped correctly\", function () {\r",
									"            console.log(\"expected generalPractitionerValue = \" + (pm.variables.get(\"\")));\r",
									"            console.log(\"returned generalPractitionerValue = \" + (JSON.stringify(response.entry[0].resource.generalPractitioner)));\r",
									"            var generalPractitionerValueExists = (pm.variables.get(\"generalPractitionerValue\"));\r",
									"            if (!generalPractitionerValueExists) {\r",
									"                console.log(\"if generalPractitionerValue doesnt exist then there should be no generalPractice returned = \" + response.entry[0].resource.generalPractitioner);\r",
									"                pm.expect(JSON.stringify(response.entry[0].resource.generalPractitioner)).to.eql(undefined);\r",
									"            }\r",
									"            else if (generalPractitionerValueExists) {\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"                pm.expect(response.entry[0].resource.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"            }\r",
									"            pm.variables.unset(\"generalPractitionerValue\");\r",
									"            pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"            pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"            pm.test(\"GeneralPractitioner has been mapped correctly\", () => {\r",
									"                if (pm.variables.get(\"s-flagged\") || !pm.variables.get(\"generalPractitionerValue\")) {\r",
									"                    console.log(\"this is a sensitive patient or the generalPractitionerValue has not been set therefore generalPractice should not be returned\");\r",
									"                    pm.expect(response.generalPractitioner).to.be.undefined;\r",
									"                } else {\r",
									"                    console.log(\"generalPractitionerValue has been set for the patient so generalPractitionerValue should be returned\");\r",
									"                    pm.expect(response.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"                    pm.expect(response.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"                    pm.expect(response.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"                    pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"                    pm.expect(response.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"                }\r",
									"\r",
									"                pm.variables.unset(\"generalPractitionerValue\");\r",
									"                pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"                pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"            });\r",
									"\r",
									"            /*nominatedPharmacy mapping function*/\r",
									"            pm.test(\"nominatedPharmacy has been mapped correctly\", function () {\r",
									"                let nominatedPharmacyExists = (pm.environment.get(\"nominatedPharmacy\"));\r",
									"                let nominatedPharmacyExtension = response.extension === undefined ? undefined : getNominatedPharmacy(response.extension);\r",
									"\r",
									"            });\r",
									"\r",
									"            /*extention items*/\r",
									"\r",
									"            /*DeathNotification Items*/\r",
									"\r",
									"            /*DeathNotification ValueDateTime mapping function*/\r",
									"            if (pm.variables.get(\"s-flagged\")) {\r",
									"                pm.test(\"DeathNotification is not displayed for a Sensitive patient\", () => {\r",
									"                    pm.expect(response.entry[0].resource.extension).to.equal(undefined);\r",
									"                });\r",
									"            } else {\r",
									"                pm.test(\"DeathNotification has been mapped correctly\", function () {\r",
									"                    if (pm.variables.get(\"deathNotificationValueDateTime\") !== \"\") {\r",
									"                        pm.expect((response.entry[0].resource.extension[0].extension[1].valueDateTime).substring(0, 10)).to.eql((pm.variables.get(\"deathNotificationValueDateTime\")));\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-DeathNotificationStatus\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"                        pm.expect(response.entry[0].resource.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
									"                    }\r",
									"                    else if (pm.variables.get(\"deathNotificationValueDateTime\") === \"\") {\r",
									"                        pm.expect(JSON.stringify(response.entry[0].resource.extension)).to.eql(undefined);\r",
									"                    }\r",
									"                });\r",
									"            }\r",
									"\r",
									"            pm.test(\"meta security object has been mapped correctly\", () => {\r",
									"                if (pm.variables.get('security.code')) {\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal(pm.variables.get('security.code'));\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted');\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"                } else {\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('U');\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('unrestricted');\r",
									"                    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"                }\r",
									"\r",
									"                pm.variables.unset('security.code');\r",
									"            });\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.globals.set(\"checkSearchMappings\", checkSearchMappings.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkRetrieveMappings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c9862187-e179-45a0-8859-a6b64ef4a76d",
								"exec": [
									"var checkRetrieveMappings = () => {\r",
									"\r",
									"/*Resource Type mapping function*/\r",
									"pm.test(\"Resource Type has been mapped correctly\", function () {\r",
									"    pm.expect(response.resourceType).to.eql(\"Patient\");\r",
									"    }\r",
									");\r",
									"\r",
									"/*Patient id mapping function*/\r",
									"pm.test(\"Patient 'Id' has been mapped correctly\", function () {\r",
									"    pm.expect(response.id).to.eql(pm.variables.get(\"patientId\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*Identifier Value mapping function*/\r",
									"pm.test(\"Identifier has been mapped correctly\", function () {\r",
									"    pm.expect(response.identifier[0].extension[0].url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"01\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Number present and verified\");\r",
									"    pm.expect(response.identifier[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-NHSNumberVerificationStatus\");\r",
									"    pm.expect(response.identifier[0].value).to.eql(pm.variables.get(\"patientId\"));\r",
									"    \r",
									"});\r",
									"\r",
									"/*Check name use has been populated properly*/\r",
									"pm.test(\"Name 'type' has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"nameType\") == \"Usual name\") {\r",
									"            pm.expect(response.name[0].use).to.eql(\"usual\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"alias\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"temp\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == \"preferred\") {\r",
									"            pm.expect(response.name[1].use).to.eql(\"nickname\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"previous\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"birth\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"old\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"bachelor\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"nameType\") == (\"maiden\")) {\r",
									"            pm.expect(response.name[1].use).to.eql(\"maiden\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"// Check birth order is populated correctly\r",
									"pm.test(\"Birth Order is returned\", () => {\r",
									"    if (pm.variables.has(\"expectedBirthOrder\")) {\r",
									"        pm.expect(response.multipleBirthInteger).to.eq(pm.variables.get(\"expectedBirthOrder\"));\r",
									"    }\r",
									"});\r",
									"pm.variables.unset(\"expectedBirthOrder\");\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t\t \r",
									"\r",
									"/*Check name start date has been populated properly*/\r",
									"pm.test(\"Name 'startdate' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].period.start).to.eql(pm.variables.get(\"namePeriodStart\"));\r",
									"});\r",
									"\r",
									"/*Check given has been populated properly*/\r",
									"pm.test(\"Name 'given' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].given).to.eql(pm.variables.get(\"given\"));\r",
									"});\r",
									"\r",
									"/*Check family has been populated properly*/\r",
									"pm.test(\"Name 'family' has been mapped correctly\", function () {\r",
									"   pm.expect(response.name[0].family).to.eql(pm.variables.get(\"family\"));\r",
									"});\r",
									"\r",
									"/*Check prefix has been populated properly*/\r",
									"pm.test(\"Name 'prefix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"prefix\")) {\r",
									"            pm.expect(response.name[0].prefix).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"            pm.expect(response.name[0].prefix[0]).to.eql(pm.variables.get(\"prefix\"));\r",
									"    }\r",
									"    \r",
									"    pm.variables.unset(\"prefix\");\r",
									"});\r",
									"\r",
									"/*Check suffix has been populated properly*/\r",
									"pm.test(\"Name 'suffix' has been mapped correctly\", function () {\r",
									"    if (!pm.variables.get(\"suffix\")) {\r",
									"        pm.expect(response.name[0].suffix).to.equal(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(response.name[0].suffix).to.eql(pm.variables.get(\"suffix\"));\r",
									"    }\r",
									"});\r",
									"\r",
									"/*gender mapping function*/\r",
									"pm.test(\"Gender has been mapped correctly\", function () {\r",
									"    if (pm.variables.get(\"gender\") == \"female\") {\r",
									"            pm.expect(response.gender).to.eql(\"female\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"male\") {\r",
									"            pm.expect(response.gender).to.eql(\"male\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not known\") {\r",
									"            pm.expect(response.gender).to.eql(\"unknown\");\r",
									"    }\r",
									"    else if (pm.variables.get(\"gender\") == \"not specified\") {\r",
									"            pm.expect(response.gender).to.eql(\"other\");\r",
									"    }\r",
									"    else pm.expect.fail(\"fail\");\r",
									"});\r",
									"\r",
									"/*Birthday mapping function*/\r",
									"pm.test(\"BirthDate has been mapped correctly\", function () {\r",
									"    pm.expect(response.birthDate).to.eql(pm.variables.get(\"birthdate\"));\r",
									"    }\r",
									");\r",
									"\r",
									"/*deceasedDateTime mapping function*/\r",
									"pm.test(\"deceasedDateTime has been mapped correctly\", function () {\r",
									"   let deceasedDateTimeExists = (pm.variables.get(\"deceasedDateTime\"));\r",
									"   if (!deceasedDateTimeExists) {\r",
									"       pm.expect(response.deceasedDateTime).to.eql(undefined);\r",
									"   }\r",
									"   else if (deceasedDateTimeExists) {\r",
									"    pm.expect((response.deceasedDateTime).substring(0,10)).to.eql((pm.variables.get(\"deceasedDateTime\")));\r",
									"    }\r",
									"    pm.variables.unset(\"deceasedDateTime\");\r",
									"});\r",
									"\r",
									"// Check Meta.Security object is displayed for Sensitive Patients\r",
									"pm.test(\"Security object has been mapped correctly\", () => {\r",
									"    let securityCode = pm.variables.get(\"securityCode\");\r",
									"\r",
									"    if (securityCode) {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('R');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('restricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    } else {\r",
									"        pm.expect(response.meta.security[0].code).to.equal('U');\r",
									"        pm.expect(response.meta.security[0].display).to.equal('unrestricted');\r",
									"        pm.expect(response.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html');\r",
									"    }\r",
									"});\r",
									"\r",
									"// Check deathNotificationExtension\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"deathNotificationStatus extension has been mapped correctly -  Only checked for a Sensitive Patient\", () => {\r",
									"        pm.expect(response.extension[0].extension[0].url).to.equal('deathNotificationStatus');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.equal('1', 'invalid code');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.equal(pm.variables.get(\"deathNotificationStatus.display\"));\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.equal('https://fhir.hl7.org.uk/CodeSystem/UKCore-DeathNotificationStatus', 'invalid system');\r",
									"        pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.equal('1.0.0', 'invalid version');\r",
									"        pm.expect(response.extension[0].url).to.equal('https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-DeathNotificationStatus', 'invalid extension.url');\r",
									"    });\r",
									"}\r",
									"\r",
									"/*Check Address Related items*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Address for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.address).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Address has been mapped correctly\", function () {\r",
									"        let expectedValue;\r",
									"        switch (pm.variables.get(\"addressType\")) {\r",
									"            case 'usual':\r",
									"                expectedValue = 'home';\r",
									"                break;\r",
									"            case 'work':\r",
									"                expectedValue = 'work';\r",
									"                break;\r",
									"            case 'correspondence':\r",
									"                expectedValue = 'billing';\r",
									"                break;\r",
									"            case 'temporary':\r",
									"                expectedValue = 'temp';\r",
									"                break;\r",
									"            default:\r",
									"                pm.expect.fail(\"addressType mapped incorrectly\");\r",
									"        }\r",
									"\r",
									"        pm.expect(response.address[0].use).to.eql(expectedValue, \"invalid addressType\");\r",
									"        pm.expect(JSON.stringify(response.address[0].line)).to.eql(pm.variables.get(\"addressLine\"), \"invalud addressLine\");\r",
									"        pm.expect(response.address[0].period.start).to.eql(pm.variables.get(\"addressPeriodStart\"), \"invalid addressPeriodStart\");\r",
									"        pm.expect(response.address[0].postalCode).to.eql(pm.variables.get(\"postalCode\"), \"invalid postalCode\");\r",
									"\r",
									"        let addressPeriodEnd = pm.variables.get(\"addressPeriodEnd\") === undefined ? undefined : pm.variables.get(\"addressPeriodEnd\");\r",
									"        pm.expect(response.address[0].period.end).to.eql(addressPeriodEnd, \"invalid addressPeriodEnd\");\r",
									"\r",
									"        if (response.address[0].extension !== undefined) {\r",
									"            let paf = response.address[0].extension[0].extension[0];\r",
									"\r",
									"            pm.test(\"Address PAF Key extension has been mapped correctly\", () => {\r",
									"                pm.expect(paf.url).to.equal('type', 'invalid url');\r",
									"                pm.expect(paf.valueCoding.code).to.equal('PAF', 'invalud valueCoding.code');\r",
									"                pm.expect(paf.valueCoding.system).to.equal('https://fhir.hl7.org.uk/CodeSystem/UKCore-AddressKeyType', 'invalid valueCoding.system');\r",
									"                pm.expect(response.address[0].extension[0].url).to.equal('https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-AddressKey', 'invalid extension.url');\r",
									"            })\r",
									"        }\r",
									"    });\r",
									"\r",
									"    pm.variables.unset(\"addressPeriodEnd\");\r",
									"}\r",
									"\r",
									"/*telecom mapping function*/\r",
									"if (pm.variables.get(\"s-flagged\")) {\r",
									"    pm.test(\"Telecom or Contact for a Sensitive patient is not returned\", () => {\r",
									"        pm.expect(response.telecom).to.be.undefined;\r",
									"        pm.expect(response.contact).to.be.undefined;\r",
									"    });\r",
									"} else {\r",
									"    if (pm.variables.get(\"telecomType\")) {\r",
									"        pm.test(\"Telecom System has been mapped correctly\", function () {\r",
									"            let telecomType;\r",
									"\r",
									"                switch (pm.variables.get(\"telecomType\").toLowerCase()) {\r",
									"                    case 'telephone':\r",
									"                        telecomType = \"phone\";\r",
									"                        break;\r",
									"                    case 'fax':\r",
									"                    case 'email':\r",
									"                        telecomType = pm.variables.get(\"telecomType\");\r",
									"                        break;\r",
									"                    case 'textphone':\r",
									"                        telecomType = \"other\";\r",
									"                        break;\r",
									"                    default:\r",
									"                        pm.expect.fail(\"telecomType mapping failure\");\r",
									"                        break;\r",
									"                }\r",
									"\r",
									"                if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                    pm.expect(response.contact[0].telecom[0].system).to.eql(telecomType)\r",
									"                }\r",
									"\r",
									"                else {\r",
									"                pm.expect(response.telecom[0].system).to.eql(telecomType, \"invalid telecomType\");\r",
									"                }\r",
									"\r",
									"                if (pm.variables.get(\"telecomType\").toLowerCase() == \"textphone\") {\r",
									"                    pm.expect(response.telecom[0].extension[0].url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-OtherContactSystem\", \"invalid telecom extension url\");\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.code).to.eql(\"textphone\", \"telecom extension code not mapped correctly\")\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.display).to.eql(\"Minicom (Textphone)\", \"telecom extension display not mapped correctly\")\r",
									"                    pm.expect(response.telecom[0].extension[0].valueCoding.system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-OtherContactSystem\", \"telecom extension system not mapped correctly\")\r",
									"                }\r",
									"        });\r",
									"        pm.test(\"Telecom Use has been mapped correctly\", function () {    \r",
									"            let telecomUse;\r",
									"            switch (pm.variables.get(\"telecomUse\").toLowerCase()) {\r",
									"                case 'home':\r",
									"                case 'answering machine':\r",
									"                    telecomUse = \"home\";\r",
									"                    break;\r",
									"                case 'work':\r",
									"                case 'mobile':\r",
									"                    telecomUse = pm.variables.get(\"telecomUse\");\r",
									"                    break;\r",
									"                case 'pager':\r",
									"                    telecomUse = \"mobile\";\r",
									"                    break;\r",
									"                case 'temporary':\r",
									"                    telecomUse = \"temp\";\r",
									"                    break;\r",
									"            }\r",
									"            if (pm.variables.get(\"telecomUse\").toLowerCase() == \"emergency\") {\r",
									"                pm.expect(response.contact[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].code).to.eql(\"C\");\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].display).to.eql(\"Emergency Contact\");\r",
									"                pm.expect(response.contact[0].relationship[0].coding[0].system).to.eql(\"http://terminology.hl7.org/CodeSystem/v2-0131\");\r",
									"                pm.expect(response.contact[0].telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"            }\r",
									"            else {\r",
									"                pm.expect(response.telecom[0].use).to.eql(telecomUse, \"invalid telecomUse\");\r",
									"                pm.expect(response.telecom[0].period.start).to.eql((pm.variables.get(\"telecomPeriodStart\")));\r",
									"                pm.expect(response.telecom[0].value).to.eql((pm.variables.get(\"telecomValue\")));\r",
									"            } \r",
									"        });\r",
									"    }\r",
									"    pm.variables.unset(\"telecomType\");\r",
									"    pm.variables.unset(\"telecomUse\");\r",
									"  }\r",
									"\r",
									"\r",
									"/*generalPractitioner mapping function*/\r",
									"pm.test(\"GeneralPractitioner has been mapped correctly\", () => {\r",
									"    if (pm.variables.get(\"s-flagged\") || !pm.variables.get(\"generalPractitionerValue\")) {\r",
									"        console.log(\"this is a sensitive patient or the generalPractitionerValue has not been set therefore generalPractice should not be returned\");\r",
									"        pm.expect(response.generalPractitioner).to.be.undefined;\r",
									"    } else {\r",
									"        console.log(\"generalPractitionerValue has been set for the patient so generalPractitionerValue should be returned\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.value).to.eql((pm.variables.get(\"generalPractitionerValue\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"        pm.expect(response.generalPractitioner[0].type).to.eql(\"Organization\");\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql((pm.variables.get(\"generalPractitionerPeriodStart\")));\r",
									"        pm.expect(response.generalPractitioner[0].identifier.period.end).to.eql((pm.variables.get(\"generalPractitionerPeriodEnd\")));\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"generalPractitionerValue\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodStart\");\r",
									"    pm.variables.unset(\"generalPractitionerPeriodEnd\");\r",
									"\r",
									"});\r",
									"\r",
									"/*nominatedPharmacy mapping function*/\r",
									"pm.test(\"nominatedPharmacy has been mapped correctly\", function () {\r",
									"    let nominatedPharmacyExists = (pm.variables.get(\"nominatedPharmacy\"));\r",
									"    let nominatedPharmacyExtension = response.extension === undefined ? undefined : getNominatedPharmacy(response.extension);\r",
									"\r",
									"    if (!nominatedPharmacyExists) {\r",
									"        pm.expect(nominatedPharmacyExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"nominatedPharmacy has been set for the patient so nominatedPharmacy should be returned\");\r",
									"        pm.expect(nominatedPharmacyExtension.url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy\");\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"nominatedPharmacy\"));\r",
									"        pm.expect(nominatedPharmacyExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\",\"invalid system\");\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"nominatedPharmacy\");\r",
									"    pm.variables.unset(\"nominatedPharmacyPeriodStart\");\r",
									"    pm.variables.unset(\"nominatedPharmacyPeriodEnd\");\r",
									"});\r",
									"\r",
									"\r",
									"/*dispensingDoctor mapping function*/\r",
									"pm.test(\"dispensingDoctor has been mapped correctly\", function () {\r",
									"    let dispensingDoctorExtension = response.extension === undefined ? undefined : getDispensingDoctor(response.extension);\r",
									"    let dispensingDoctorExists = pm.variables.get(\"dispensingDoctor\");\r",
									"\r",
									"    if (!dispensingDoctorExists) {\r",
									"        pm.expect(dispensingDoctorExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"dispensingDoctor has been set for the patient so dispensingDoctor should be returned\");\r",
									"        pm.expect(dispensingDoctorExtension.url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-PreferredDispenserOrganization\");\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"dispensingDoctor\"));\r",
									"        pm.expect(dispensingDoctorExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"    }\r",
									"    pm.variables.unset(\"dispensingDoctor\");\r",
									"    pm.variables.unset(\"dispensingDoctorPeriodStart\");\r",
									"});\r",
									"\r",
									"/*medicalApplianceSupplier mapping function*/\r",
									"pm.test(\"medicalApplianceSupplier has been mapped correctly\", function () {\r",
									"    let medicalApplianceSupplierExtension = response.extension === undefined ? undefined : getMedicalApplianceSupplier(response.extension);\r",
									"    let medicalApplianceSupplierExists = pm.variables.get(\"medicalApplianceSupplier\");\r",
									"\r",
									"    if (!medicalApplianceSupplierExists) {\r",
									"        pm.expect(medicalApplianceSupplierExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        console.log(\"medicalApplianceSupplier has been set for the patient so medicalApplianceSupplier should be returned\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\");\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.value).to.eql(pm.variables.get(\"medicalApplianceSupplier\"));\r",
									"        pm.expect(medicalApplianceSupplierExtension.valueReference.identifier.system).to.eql(\"https://fhir.nhs.uk/Id/ods-organization-code\");\r",
									"    }\r",
									"    pm.variables.unset(\"medicalApplianceSupplier\");\r",
									"    pm.variables.unset(\"medicalApplianceSupplierPeriodStart\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"language Extention has been mapped correctly\", () => {\r",
									"    let languageExtension = response.extension === undefined ? undefined : getLanguageExtention(response.extension);\r",
									"    let language = pm.variables.get(\"language\");\r",
									"\r",
									"    if (!language) {\r",
									"        pm.expect(languageExtension).to.eql(undefined);\r",
									"    }\r",
									"    else {\r",
									"        pm.expect(languageExtension.extension[0].url).to.eql(\"language\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].code).to.eql(pm.variables.get(\"language\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].display).to.eql(pm.variables.get(\"languageDisplay\"));\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-HumanLanguage\");\r",
									"        pm.expect(languageExtension.extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"        pm.expect(languageExtension.extension[1].url).to.eql(\"interpreterRequired\");\r",
									"        pm.expect(languageExtension.extension[1].valueBoolean).to.eql(pm.variables.get(\"interpreter\"));\r",
									"        pm.expect(languageExtension.url).to.equal('https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NHSCommunication', 'invalid url');\r",
									"    }\r",
									"\r",
									"    pm.variables.unset(\"language\");\r",
									"    pm.variables.unset(\"languageDisplay\");\r",
									"    pm.variables.unset(\"interpreter\");\r",
									"\r",
									"});\r",
									"\r",
									"function getLanguageExtention(extensions) {\r",
									"    for (let extensions of response.extension) {\r",
									"        try {\r",
									"                for (let e of extensions.extension) {\r",
									"                    if (e.url == \"language\") {\r",
									"                    console.log(e);\r",
									"                    return extensions;\r",
									"                    }       \r",
									"                 }\r",
									"            } catch(err) {\r",
									"                }\r",
									"        }\r",
									"}\r",
									"\r",
									"\r",
									"function getDispensingDoctor(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-PreferredDispenserOrganization\") {\r",
									"\t\t\t\t\t\tconsole.log(\"dispensingDoctorExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"function getNominatedPharmacy(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy\") {\r",
									"\t\t\t\t\t\tconsole.log(\"nominatedPharmacyExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"function getMedicalApplianceSupplier(extensions) {\r",
									"\tfor (let extensions of response.extension) {\r",
									"\t    console.log(extensions)\r",
									"\t\t\t\ttry {\r",
									"\t\t\t\t\tif (extensions.url == \"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\") {\r",
									"\t\t\t\t\t\tconsole.log(\"medicalApplianceSupplierExists\");\r",
									"\t\t\t\t\t\treturn extensions;\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t} catch(err) {\r",
									"\t\t\t\t}\r",
									"\t\t\t}\r",
									"}\r",
									"\r",
									"\r",
									"};       \r",
									"\r",
									"pm.variables.set(\"s-flagged\",false);\r",
									"pm.globals.set(\"checkRetrieveMappings\", checkRetrieveMappings.toString());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "HL7RetrieveResponseChecks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2d0cecbd-9a52-4f7d-a415-ca611387d572",
								"exec": [
									"/*HL7 Retrieve Response Checks: Provides tests to assert against HL7 Retrieve responses\r",
									"=======================================================================================*/\r",
									"\r",
									"pm.globals.set('HL7ResponseValidator', function HL7ResponseValidator() {\r",
									"\r",
									"    let response = pm.globals.get(\"HL7RetrieveResponse\");\r",
									"    let message = {};\r",
									"    \r",
									"    /*check GeneralPractice has been populated correctly*/\r",
									"        message.assertHL7GeneralPracticeIs = (gp) => {\r",
									"        pm.test(\"Check HL7 Response General Practice = \" + gp, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.code.$.code).to.eql(gp);\r",
									"        });\r",
									"    }\r",
									"        message.assertHL7GeneralPracticeCodeIs = (gpValue) => {\r",
									"        pm.test(\"Check HL7 Response General Practice Code = \" + gpValue, () => {\r",
									"             pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.performer.assignedEntity.id.$.extension).to.eql(gpValue);\r",
									"        });\r",
									"    }\r",
									"        message.assertHL7GeneralstartDateIs = (startDate) => {\r",
									"        pm.test(\"Check HL7 Response General Practice startDate = \" + startDate, () => {\r",
									"             pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson.playedOtherProviderPatient.subjectOf.patientCareProvision.effectiveTime.low.$.value).to.eql(startDate);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Gender has been populated correcty*/\r",
									"    message.assertHL7GenderIs = (Gender) => {\r",
									"        pm.test(\"Check HL7 Response Gender = \" + Gender, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000209UK01.PartAdminGenderCode\"].partPerson.administrativeGenderCode.$.code).to.eql(Gender);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoB has been populated correcty*/\r",
									"    message.assertHL7DateOfBirthIs = (DOB) => {\r",
									"        pm.test(\"Check HL7 Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000210UK01.PartBirthTime\"].partPerson.birthTime.$.value).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"\r",
									"    /*check the DoD has been populated correcty*/\r",
									"    message.assertHL7DateOfDeathIs = (DOD) => {\r",
									"        pm.test(\"Check HL7 Response Date of Death = \" + DOD, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000211UK01.PartDeceasedTime\"].partPerson.deceasedTime.$.value).to.eql(DOD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification Date has been populated correcty*/\r",
									"    message.assertHL7DeathNotificationDateIs = (DND) => {\r",
									"        pm.test(\"Check HL7 Response Death Death Notification Date = \" + DND, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.patientPerson[\"COCT_MT000211UK01.PartDeceasedTime\"].subjectOf.notificationTime.value.$.value).to.eql(DND)\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification has been populated correcty*/\r",
									"    message.assertHL7DeathNotificationIs = (DN) => {\r",
									"        pm.test(\"Check HL7 Response Death Notification  = \" + DN, () => {\r",
									"            pm.expect(response[\"SOAP-ENV:Envelope\"][\"SOAP-ENV:Body\"].retrievalQueryResponse.QUPA_IN000009UK06.ControlActEvent.subject.PDSResponse.subject.patientRole.subjectOf2.deathNotification.code.$.code).to.eql(DN)\r",
									"        });\r",
									"    }\r",
									"    return message;\r",
									"\r",
									"} + '; HL7ResponseValidator();');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PDSUpdateResponseChecks",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3b02438b-f569-420b-add3-7d0a4ed159e7",
								"exec": [
									"/*HL7 Retrieve Response Checks: Provides tests to assert against HL7 Retrieve responses\r",
									"=======================================================================================*/\r",
									"\r",
									"pm.globals.set('PDSUpdateResponseValidator', function PDSUpdateResponseValidator() {\r",
									"\r",
									"    var response = pm.variables.get(\"pdsUpdateResponse\");\r",
									"    let message = {};\r",
									"   \r",
									"        /*check the DoB has been populated correcty*/\r",
									"    message.assertDateOfBirthHasBeenUpdated = (DOB) => {\r",
									"        pm.test(\"PDS Update Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response.birthDate).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the PoB has been populated correcty*/\r",
									"    message.assertPlaceOfBirthHasBeenUpdated = (POB) => {\r",
									"        const extensions = response.hasOwnProperty(\"extension\") ? response['extension'] : [];\r",
									"        let actualBirthPlaceInfo = extensions.filter(x => x.url.includes(\"birthPlace\"));\r",
									"        pm.test(\"Check PDS Update Response for Place of Birth\", () => {\r",
									"            // Check there are no duplications\r",
									"            pm.expect(actualBirthPlaceInfo.length).to.eq(1);\r",
									"\r",
									"            // Check the actual value is the same as the expected value\r",
									"            pm.expect(JSON.stringify(actualBirthPlaceInfo[0])).to.eq(JSON.stringify(POB));;\r",
									"        });\r",
									"    }\r",
									"\r",
									"    // Check place of birth has been remmoved\r",
									"    message.assertPlaceOfBirthHasBeenRemoved = () => {\r",
									"        const extensions = response.hasOwnProperty(\"extension\") ? response['extension'] : [];\r",
									"        let actualBirthPlaceInfo = extensions.filter(x => x.url.includes(\"birthPlace\"));\r",
									"    \r",
									"        pm.test(\"PDS Place of Birth has been removed\", () => {\r",
									"            pm.expect(actualBirthPlaceInfo[0]).to.eq(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"   // check the General Practice has been populated correctly\r",
									"    message.assertGeneralPracticeIs = (gpValue) => {\r",
									"        pm.test(\"PDS Update Response General Practice has been updated \" + gpValue, () => {\r",
									"            pm.expect(response.generalPractitioner[0].identifier.value).to.eql(gpValue);         \r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertGeneralPracticeStartDate = (StartDate) => {\r",
									"        pm.test(\"PDS Update Response General Practice Start Date \" + StartDate, () => {\r",
									"            pm.expect(response.generalPractitioner[0].identifier.period.start).to.eql(StartDate);         \r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Gender has been populated correcty*/\r",
									"    message.assertGenderHasBeenUpdated = (Gender) => {\r",
									"        pm.test(\"PDS Update Response Gender = \" + Gender, () => {\r",
									"            pm.expect(response.gender).to.eql(Gender);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoB has been populated correcty*/\r",
									"    message.assertDateOfBirthHasBeenUpdated = (DOB) => {\r",
									"        pm.test(\"PDS Update Response Date of Birth = \" + DOB, () => {\r",
									"            pm.expect(response.birthDate).to.eql(DOB);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the DoD has been populated correcty*/\r",
									"    message.assertDateOfDeathHasBeenUpdated = (DOD) => {\r",
									"        pm.test(\"PDS Update Response Date of Death = \" + DOD, () => {\r",
									"            pm.expect(response.deceasedDateTime.substr(0, 10)).to.eql(DOD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Death Notification has been populated correcty*/\r",
									"    message.assertDeathNotificationHasBeenUpdated = () => {\r",
									"        pm.test(\"PDS Update Death Notification has been updated\", () => {\r",
									"            pm.expect(response.extension[0].url).to.eql(\"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].url).to.eql(\"deathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].code).to.eql(\"1\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].display).to.eql(\"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].system).to.eql(\"https://fhir.hl7.org.uk/CodeSystem/UKCore-DeathNotificationStatus\");\r",
									"            pm.expect(response.extension[0].extension[0].valueCodeableConcept.coding[0].version).to.eql(\"1.0.0\");\r",
									"            pm.expect(response.extension[0].extension[1].url).to.eql(\"systemEffectiveDate\");\r",
									"            pm.expect(response.extension[0].extension[1].valueDateTime.substr(0, 10)).to.eql(pm.globals.get(\"deathNotificationDateAndTime\").substr(0, 10));\r",
									"        });\r",
									"    }\r",
									"\r",
									"    /*check the Meta Version Id has been populated correcty*/\r",
									"    message.assertVersionIdHasBeenUpdated = () => {\r",
									"        pm.test(\"PDS Update VersionId has been updated\", () => {\r",
									"            let versionId = pm.globals.get(\"versionId\") + 1;\r",
									"            pm.expect(response.meta.versionId).to.eql(JSON.stringify(versionId));\r",
									"        });\r",
									"    }\r",
									"\r",
									"        /*check the NominatedPharmacy has been populated correcty*/\r",
									"    let nominatedPharmacy = getNominatedPharmacy(response.extension);\r",
									"\r",
									"\r",
									"    message.assertNominatedPharmacyHasBeenUpdated = (expectedResponseNP) => {\r",
									"        pm.test(\"Check PDS Update Response nominatedPharmacy is correct\", () => {\r",
									"            pm.expect(nominatedPharmacy).to.eql(expectedResponseNP);\r",
									"        });\r",
									"    }\r",
									"   \r",
									"    message.assertNominatedPharmacyHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response nominatedPharmacy has been removd\", () => {\r",
									"            pm.expect(nominatedPharmacy).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getNominatedPharmacy(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-NominatedPharmacy\") {\r",
									"                            console.log(\"nominatedPharmacyExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"\r",
									"   /*check the MedicalApplianceSupplier has been populated correcty*/\r",
									"    let MedicalApplianceSupplier = getMedicalApplianceSupplier(response.extension);\r",
									"\r",
									"    message.assertMedicalApplianceSupplierHasBeenUpdated = (expectedResponseMAS) => {\r",
									"        pm.test(\"Check PDS Update Response MedicalApplianceSupplier is correct\", () => {\r",
									"            pm.expect(MedicalApplianceSupplier).to.eql(expectedResponseMAS);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertMedicalApplianceSupplierHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response MedicalApplianceSupplier has been removd\", () => {\r",
									"            pm.expect(MedicalApplianceSupplier).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getMedicalApplianceSupplier(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.hl7.org.uk/StructureDefinition/Extension-UKCore-MedicalApplianceSupplier\") {\r",
									"                            console.log(\"MedicalApplianceSupplierExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"\r",
									"   /*check the DispensingDoctor has been populated correcty*/\r",
									"    let DispensingDoctor = getDispensingDoctor(response.extension);\r",
									"\r",
									"    message.assertDispensingDoctorHasBeenUpdated = (expectedResponseDD) => {\r",
									"        pm.test(\"Check PDS Update Response DispensingDoctor is correct\", () => {\r",
									"            pm.expect(DispensingDoctor).to.eql(expectedResponseDD);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    message.assertDispensingDoctorHasBeenRemoved = () => {\r",
									"        pm.test(\"Check PDS Update Response DispensingDoctor has been removd\", () => {\r",
									"            pm.expect(DispensingDoctor).to.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function getDispensingDoctor(extensions) {\r",
									"        for (let extensions of response.extension) {\r",
									"                    try {\r",
									"                        if (extensions.url == \"https://fhir.nhs.uk/R4/StructureDefinition/Extension-UKCore-DispensingDoctor\") {\r",
									"                            console.log(\"DispensingDoctorExists\");\r",
									"                            return extensions;\r",
									"                        }\r",
									"                    } catch(err) {\r",
									"                    }\r",
									"        }\r",
									"    }\r",
									"    return message;\r",
									"\r",
									"} + '; PDSUpdateResponseValidator();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PDSUpdateMessageRetrieve",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0c23c1c4-160a-45c4-b563-aa0e00987e2c",
								"exec": [
									"/*This function sets the contentLoaction from an Update Request response and then uses it to make a call to the message polling service\r",
									"to retrieve the Update Response and save the response as a variable for subsequent tests*/\r",
									"\r",
									"/* This function sets the contentLoaction from an Update Request response and then uses it to make a call to the message polling service\r",
									"to retrieve the Update Response and save the response as a variable for subsequent tests */\r",
									"\r",
									"pm.globals.set('PDSUpdateMessageRetrieve', function updateResponse() {\r",
									"    let methods = {};\r",
									"\r",
									"    // need to remove verifyErrorMsg param as it's no longer required\r",
									"    methods.retrieveMessage = (response, expectedErrorResponse) => {\r",
									"        let contentLocation = response.headers.get('Content-Location');\r",
									"\r",
									"        setTimeout(() => {\r",
									"            var Header = require('postman-collection').Header;\r",
									"            let asidHeader = pm.environment.get(\"asidHeader\");\r",
									"            let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");\r",
									"            let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");\r",
									"            let authorization = pm.environment.get(\"authorizationHeader\");\r",
									"\r",
									"            pm.sendRequest({\r",
									"                url: pm.environment.get(\"environment\") + contentLocation,\r",
									"                method: 'GET',\r",
									"                header: {\r",
									"                    authorization,\r",
									"                    asidHeader,\r",
									"                    sessionURIDHeader,\r",
									"                    identityUUIDHeader,\r",
									"                },\r",
									"\r",
									"            }, function (err, response) {\r",
									"                if (err) {\r",
									"                    console.warn('UpdateMessageRetrieve', err)\r",
									"                    throw new Error(\"An error occurred calling the polling endpoint\");\r",
									"                }\r",
									"\r",
									"                expectedErrorResponse ? validatePollingErrorResponse(response) : validatePollingMessage(response);\r",
									"            });\r",
									"        }, 1000);\r",
									"    }\r",
									"    return methods;\r",
									"\r",
									"    function validatePollingErrorResponse(response) {\r",
									"        pm.test(\"Check Polling Message Service does not Return Status code 200 for Error Response\", function () {\r",
									"            pm.expect(response.code).not.equal(200);\r",
									"            pm.variables.set(\"pdsUpdateErrorResponse\", response.json())\r",
									"            pm.variables.set(\"pdsUpdateErrorResponseCode\", response.code)\r",
									"        });\r",
									"    }\r",
									"\r",
									"    function validatePollingMessage(response) {\r",
									"        pm.test(\"Check Polling Message Service Returns Status code 200\", function () {\r",
									"            pm.expect(response.code).to.equal(200);\r",
									"            pm.variables.set(\"pdsUpdateResponse\", response.json())\r",
									"            console.log(\"update Response set\")\r",
									"            console.log(pm.variables.get(\"pdsUpdateResponse\"))\r",
									"        });\r",
									"\r",
									"        pm.test(\"Check PDS Update VersionId has been updated\", function () {\r",
									"            let versionId = pm.variables.get(\"versionId\") + 1;\r",
									"            pm.expect(response.json().meta.versionId).to.eql(JSON.stringify(versionId));\r",
									"            pm.globals.set(\"metaVersionId\", response.headers.get('Etag'));\r",
									"            pm.variables.set(\"versionId\", parseInt(response.json().meta.versionId));\r",
									"        })\r",
									"    }\r",
									"} + '; updateResponse();');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{environment}}",
							"host": [
								"{{environment}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Search",
					"item": [
						{
							"name": "Simple Search",
							"item": [
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e7aca4d7-09bf-4bee-bd3b-2ce85b47cca4",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													"pm.variables.set(\"expectedBirthOrder\", 1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6a95d3ba-d1bc-4397-a120-f817eb7daa6e",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "db95b0be-a5ea-4360-b5ef-78260403cfa1",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Alias\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"1990-10-10\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Dr\");",
													"pm.variables.set(\"nameType\", \"alias\");",
													"pm.variables.set(\"addressType\", \"work\");",
													"pm.variables.set(\"telecomType\", \"fax\");",
													"pm.variables.set(\"telecomUse\", \"work\");",
													"pm.variables.set(\"given\", [\"John\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"bt Global services\",\"1 sovereign Street\",\"leeds\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"postalCode\", \"LS14BT\");",
													"pm.variables.set(\"patientId\", \"5900007820\");",
													"pm.variables.set(\"metaVersionId\", \"21\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"2342424234\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e2b2a67d-f0c9-419e-85f0-c0a81863035a",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 3",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c7b7cd7a-da79-4f8e-8684-e264bfc06e70",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Unknown\");",
													"pm.variables.set(\"genderQ\", \"unknown\");",
													"pm.variables.set(\"gender\", \"not known\");",
													"pm.variables.set(\"birthdate\", \"2001-02-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lady\");",
													"pm.variables.set(\"nameType\", \"preferred\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"textphone\");",
													"pm.variables.set(\"telecomUse\", \"pager\");",
													"pm.variables.set(\"given\", [\"person\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"13 westwood\",\"bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"postalCode\", undefined);",
													"pm.variables.set(\"patientId\", \"5900007073\");",
													"pm.variables.set(\"metaVersionId\", \"4\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "65dae9d7-ab1d-4649-9140-bb38da5e37dc",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac377c5a-27d6-4984-a93d-e1c381097d1e",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4c1eebaa-afd3-4621-a5c9-7ca2783939a4",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"previous\");",
													"pm.variables.set(\"genderQ\", \"other\");",
													"pm.variables.set(\"gender\", \"not specified\");",
													"pm.variables.set(\"birthdate\", \"2008-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Lord\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"email\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"someone\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"15 westwood ave\",\"eccleshill\",\"Bradford\",\"west yorkshire\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900019241\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
													"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "387b9a0e-4663-45a2-94db-8a66c90bacf2",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "079b0b27-e129-4712-ae81-9a852a0a852d",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"temporary\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2004-03-01\");",
													"",
													"",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Miss\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"mobile\");",
													"pm.variables.set(\"given\", [\"ned\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"13 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900008290\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"09000000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38fb2508-371e-4530-bfaa-061b1cfb4335",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "989f6273-5894-4119-b483-1155fdab0663",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mister\");",
													"pm.variables.set(\"gender\", \"male\");",
													"pm.variables.set(\"birthdate\", \"2009-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Mr\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"temporary\");",
													"",
													"pm.variables.set(\"given\", [\"Any\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900005798\");",
													"pm.variables.set(\"metaVersionId\", \"3\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"0900000000\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3171ca44-f539-410d-bead-03406867b234",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aaab1c74-57b8-4956-86d4-213bb0c3685a",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Answermachine\");",
													"pm.variables.set(\"genderQ\", \"unknown\");",
													"pm.variables.set(\"gender\", \"not known\");",
													"pm.variables.set(\"birthdate\", \"2007-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Mrs\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"Answering Machine\");",
													"",
													"pm.variables.set(\"given\", [\"another\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"27 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
													"pm.variables.set(\"patientId\", \"5900000605\");",
													"pm.variables.set(\"metaVersionId\", \"5\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"09234567\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Answering Machine\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - Minimum Criteria - Gender, DOB & Family 8",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6be2200-818d-4338-af5d-6d18b799c6ec",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b1ffa8b5-94d4-4681-a1e9-c6eb17f3ac75",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Emergency\");",
													"pm.variables.set(\"genderQ\", \"other\");",
													"pm.variables.set(\"gender\", \"not specified\");",
													"pm.variables.set(\"birthdate\", \"2004-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"home\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"Emergency\");",
													"",
													"pm.variables.set(\"given\", [\"Emma\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"91 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900013863\");",
													"pm.variables.set(\"metaVersionId\", \"2\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
													"pm.variables.set(\"telecomValue\", \"0900000001\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{genderQ}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{genderQ}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Emergency\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & DOD",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "48b36eae-0fbf-48f3-b3a7-1d83cacd5d62",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8cbd13e1-91cb-43c9-9eb0-97f427dfc1e4",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family, DOD & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6935c579-067b-4de8-9ee6-c501500857dd",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "083479a9-c3b0-4360-9b4d-afd3c7af358c",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{deceasedDateTime}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "death-date",
													"value": "{{deceasedDateTime}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - With Optional Criteria - Gender, DOB,  Family & Given",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8f63fdd8-bf39-49dc-b7e6-e43402071b6d",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"family\", \"Mapping\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2010-01-01\");",
													"pm.variables.set(\"death-date\", \"2010-01-01\");",
													"",
													"//5900009068",
													"/*set variables for checking mapping*/",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Dame\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
													"pm.variables.set(\"givenS\", \"Search\");",
													"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
													"pm.variables.set(\"patientId\", \"5900009068\");",
													"pm.variables.set(\"metaVersionId\", \"15\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
													"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
													"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4ce64b41-f024-4941-9039-7d3fea974a36",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenS}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "given",
													"value": "{{givenS}}"
												}
											]
										},
										"description": "Testing the correct url is returned on an error response"
									},
									"response": []
								},
								{
									"name": "Simple Search - Postcode Matching",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "930e5ffe-7ba8-413f-8a3e-dd26522523f4",
												"exec": [
													"pm.variables.set(\"testData\", testData = [",
													"    {",
													"        test: 'No Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01'",
													"    },",
													"    {",
													"        test: 'Correct Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP'",
													"    },",
													"    {",
													"        test: 'Incorrect Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3P2'",
													"    },",
													"    {",
													"        test: 'Correct Postcode & GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP&general-practitioner=Y00007'",
													"    },",
													"    {",
													"        test: 'Incorrect Postcode & Correct GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3P1&general-practitioner=Y00007'",
													"    },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2725c6d4-fbf2-4596-a7ae-ec74a60a3e76",
												"exec": [
													"let testScenarios = pm.variables.get('testData');",
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"testScenarios.forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        pm.expect(res.code).to.equal(200, 'invalid status code returned');",
													"",
													"",
													"        if (scenario.test.includes('Incorrect')) {",
													"            pm.test(scenario.test + \" Returns 0 Patients\", () => {",
													"                pm.expect(res.json().total).to.equal(0);",
													"                pm.expect(res.json().entry).to.be.undefined;",
													"            })",
													"",
													"        } else {",
													"            pm.test(scenario.test + \" Returns Patient 5900006433\", () => {",
													"                pm.expect(res.json().entry[0].resource.id).to.equal('5900006433');",
													"            })",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "NHS Number: 5900006433\n\n\nValidate that simple search takes into account address-postcode, when performing a search so that;\n- Simple search which includes postcode where all query parameters match a patient then the Patients record is returned\n- Simple search which includes postcode where all query parameters apart from postcode matches a patient record then No Patient is returned\n- Simple search which includes general-practitioner and postcode where all query parameters match a patient then the Patients record is returned\n- Simple search which includes general-practitioner and postcode where all query parameters apart from postcode matches a patient record then No Patient is returned"
									},
									"response": []
								},
								{
									"name": "Simple Search - GP Matching",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aae546ad-3888-44cc-ba45-71b9ae14008f",
												"exec": [
													"pm.variables.set(\"testData\", testData = [",
													"    {",
													"        test: 'No GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01'",
													"    },",
													"    {",
													"        test: 'Correct GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&general-practitioner=Y00007'",
													"    },",
													"    {",
													"        test: 'Incorrect GP',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&general-practitioner=Y00001'",
													"    },",
													"    {",
													"        test: 'Incorrect GP & correct Postcode',",
													"        query: '/Patient?family=muck&gender=female&birthdate=2000-01-01&address-postcode=P1 3PP&general-practitioner=Y00001'",
													"    },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cee5307e-c250-456f-beea-3e894a3aa08f",
												"exec": [
													"let testScenarios = pm.variables.get('testData');",
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"testScenarios.forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        pm.expect(res.code).to.equal(200, 'invalid status code returned');",
													"",
													"",
													"        if (scenario.test.includes('Incorrect')) {",
													"            pm.test(scenario.test + \" Returns 0 Patients\", () => {",
													"                pm.expect(res.json().total).to.equal(0);",
													"                pm.expect(res.json().entry).to.be.undefined;",
													"            })",
													"",
													"        } else {",
													"            pm.test(scenario.test + \" Returns Patient 5900006433\", () => {",
													"                pm.expect(res.json().entry[0].resource.id).to.equal('5900006433');",
													"            })",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "NHS Number: 5900006433\n\nValidate that simple search takes into account general-practitioner, when performing a search so that;  \n- Simple search which includes general-practitioner where all query parameters match a patient then the Patients record is returned\n- Simple search which includes general-practitioner where all query parameters apart from postcode matches a patient record then No Patient is returned\n- Simple search which includes general-practitioner and postcode where all query parameters apart from general-practitioner matches a patient record then No Patient is returned"
									},
									"response": []
								},
								{
									"name": "Simple Search - Sensitive Patient",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e1c81aa2-e698-495d-b3c2-aea6ac8199b5",
												"exec": [
													"/*set variables for test*/",
													"pm.variables.set(\"s-flagged\", true);",
													"",
													"pm.variables.set(\"family\", \"Middleton\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2000-01-01\");",
													"",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"pm.variables.set(\"prefix\", \"Baroness\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"pm.variables.set(\"given\", [\"Cynthia\",\"Cindy\"]);",
													"pm.variables.set(\"suffix\", [\"Brnss\"]);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-31\");",
													"pm.variables.set(\"patientId\", \"5900018512\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"deceasedDateTime\", \"2009-05-01\");",
													"pm.variables.set(\"security.code\", \"R\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2890d8d9-ebbb-41fe-b8bf-ca216de019b6",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"pm.variables.set(\"s-flagged\", false);",
													"pm.variables.unset(\"security.code\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "general-practitioner",
													"value": "Y0001",
													"disabled": true
												}
											]
										},
										"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Historic Search",
							"item": [
								{
									"name": "Historic Search - search with wildcarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "67c52031-785f-4cc7-a0cc-5840bdb1b8f5",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\",  undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "979067e6-4508-46f1-916d-7f3d03530521",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'family' name will return the patient with current name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df422eda-7ff4-46d3-bdeb-d0c4c2bbb735",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "95f1a818-7bdf-4a1d-9013-c6a3d6fbaa18",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{family}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{family}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with wildcarded Historic given and historic name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "52f721ac-e14f-4d28-bd7e-5070d5ec6d9e",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Hi\\*\");",
													"pm.variables.set(\"historicFamily\", \"Po\\*\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "97fe53c7-f78c-4266-b84a-c9f6fbdff89f",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a wildcarded historic 'given' and 'family' name will return the patient with current 'family' name.\n- Search score shall always result in < 1 as wildcards have been used."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3a01a19f-3325-47a4-bc6e-d92005af26c9",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "69951da5-6ae3-4fb2-b0d3-71e5bd112926",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{historicFamily}}&gender={{gender}}&birthdate={{birthdate}}&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{historicFamily}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'family' name will return the patient with current 'family' name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildarded Historic given name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe7fa0d9-79e8-44ba-811a-203cf290f531",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "45470074-057f-49f5-a448-b0a4bf230f88",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score < 1*/",
													"pm.test(\"Search score is returned as < 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.below(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&given={{historicGiven}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "{{family}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "given",
													"value": "{{historicGiven}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								},
								{
									"name": "Historic Search - search with non wildcarded Historic given and family name",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "55408f4b-4ddd-440e-ae0f-803a6c2a2692",
												"exec": [
													"/*set variables for test*/",
													"",
													"pm.variables.set(\"historicGiven\", \"Historic\");",
													"pm.variables.set(\"historicFamily\", \"Postcode\");",
													"pm.variables.set(\"family\", \"Name*\");",
													"pm.variables.set(\"gender\", \"female\");",
													"pm.variables.set(\"birthdate\", \"2009-02-01\");",
													"",
													"/*set variables for checking mapping*/",
													"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
													"",
													"pm.variables.set(\"prefix\", \"Ms\");",
													"pm.variables.set(\"nameType\", \"Usual name\");",
													"pm.variables.set(\"addressType\", \"usual\");",
													"pm.variables.set(\"telecomType\", \"telephone\");",
													"pm.variables.set(\"telecomUse\", \"home\");",
													"",
													"pm.variables.set(\"family\", \"Name\");",
													"pm.variables.set(\"given\", [\"Current\"]);",
													"pm.variables.set(\"suffix\", undefined);",
													"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"addressLine\",JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\"]));",
													"pm.variables.set(\"addressPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"postalCode\", \"BD2 2NK\");",
													"pm.variables.set(\"patientId\", \"5900015505\");",
													"pm.variables.set(\"metaVersionId\", \"7\");",
													"pm.variables.set(\"resourceType\", \"Patient\");",
													"pm.variables.set(\"telecomPeriodStart\", \"2020-03-02\");",
													"pm.variables.set(\"telecomValue\", \"07900000000\");",
													"pm.variables.set(\"deceasedDateTime\", \"\");",
													"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "df70e6c5-e8a9-4edd-9782-4f4a07a1567a",
												"exec": [
													"var response = pm.response.json();",
													"",
													"// Apply Common Mapping Tests",
													"//======================================",
													"eval(pm.globals.get(\"checkSearchMappings\"))();",
													"",
													"/*check that the Search score = 1*/",
													"pm.test(\"Search score is returned as = 1\", function () {",
													"    pm.expect(response.entry[0].search.score).to.be.eql(1);",
													"    }",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?given={{historicGiven}}&gender={{gender}}&birthdate={{birthdate}}&_history=true&family={{historicFamily}}",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "given",
													"value": "{{historicGiven}}"
												},
												{
													"key": "gender",
													"value": "{{gender}}"
												},
												{
													"key": "birthdate",
													"value": "{{birthdate}}"
												},
												{
													"key": "_history",
													"value": "true"
												},
												{
													"key": "family",
													"value": "{{historicFamily}}"
												}
											]
										},
										"description": "- Historic search using a non wildcarded historic 'given' name will return the patient with current name.\n- Search score shall 1 as we should get an exact match."
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Advanced Search",
							"item": [
								{
									"name": "date range tests",
									"item": [
										{
											"name": "DOD Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOD between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9bac4bc9-f1ec-41b4-a0b7-6e3e74f2a92a",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d18aa4bf-84cd-4ecf-9a99-dc59e966f7ab",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOD falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "8cfccc88-6a81-4e00-b2a5-cf2c4cea2e99",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "aeebe819-224d-498f-8c89-f73844554bb4",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "0cfb66f9-d7ef-4da9-959d-b9200ae0183c",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-02&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cca28108-972f-433b-8ff4-8cf9ede65254",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdate}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "57b872a3-339f-4d60-95c2-f19bf6b14c87",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2015-03-03&death-date=le2015-04-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3782f9b6-d5dd-4fa6-8704-c7d556712fda",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOD above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "8b13e45b-a215-498e-84e0-554239cbf28f",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"dateOfDeathRange\", \"ge2014-01-01&death-date=le2015-03-01\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "aa7e8535-cd23-46bc-9360-a763b7f1e1a4",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}&death-date={{dateOfDeathRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																},
																{
																	"key": "death-date",
																	"value": "{{dateOfDeathRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "DOB Range tests",
											"item": [
												{
													"name": "Date of Birth Date Range check - DOB between 2 dates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1b87cc6f-14df-4bc6-9b8f-deccf4211032",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5a33bfac-3bc6-4423-a4a4-b3774bd680c4",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB falls between 2 date ranges, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "193e8fdf-2d62-4f78-9a04-84651c4ef1af",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-01&birthdate=le2011-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a9311081-c04d-4197-b1b3-20c647957bad",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the lower date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB equals upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "429cbb15-2e3f-4e32-9089-6f7558bd1b3b",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2010-01-01\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"/*set variables for checking mapping*/",
																	"",
																	"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
																	"",
																	"pm.variables.set(\"prefix\", \"Dame\");",
																	"pm.variables.set(\"nameType\", \"Usual name\");",
																	"pm.variables.set(\"addressType\", \"usual\");",
																	"pm.variables.set(\"telecomType\", \"telephone\");",
																	"pm.variables.set(\"telecomUse\", \"home\");",
																	"",
																	"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
																	"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
																	"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
																	"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
																	"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
																	"pm.variables.set(\"patientId\", \"5900009068\");",
																	"pm.variables.set(\"metaVersionId\", \"15\");",
																	"pm.variables.set(\"resourceType\", \"Patient\");",
																	"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
																	"pm.variables.set(\"telecomValue\", \"07900000000\");",
																	"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
																	"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
																	"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
																	"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e214389c-022c-4dee-98b9-68c7d6d66cc6",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"// Apply Common Mapping Tests",
																	"//======================================",
																	"eval(pm.globals.get(\"checkSearchMappings\"))();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB equals the upper date of a date range, the Patient is found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB below lower date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "06a8f5e1-e4c1-40f7-9faf-e7e2e60b8e0c",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2010-01-02&birthdate=le2011-01-02\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "226fc153-bee4-4f04-b195-100d88d5c7aa",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is below the lower date of DOB date range, the Patient should not be found"
													},
													"response": []
												},
												{
													"name": "Date of Birth Date Range check - DOB above upper date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "63cdf74b-68fa-4fc0-bf73-893515ea2c92",
																"exec": [
																	"/*set variables for test*/",
																	"",
																	"pm.variables.set(\"family\", \"Mapping\");",
																	"pm.variables.set(\"gender\", \"female\");",
																	"pm.variables.set(\"birthdateRange\", \"ge2009-01-01&birthdate=le2009-12-31\");",
																	"pm.variables.set(\"birthdate\", \"2010-01-01\");",
																	"",
																	"//5900009068",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2e6036f2-2653-4c5b-a8ac-4750cddd5030",
																"exec": [
																	"var response = pm.response.json();",
																	"",
																	"pm.test(\"Check that no Patient returned\", function () {",
																	"    pm.response.to.have.status(200);",
																	"    pm.expect(response.entry).to.eql(undefined);",
																	"    pm.expect(response.resourceType).to.eql(\"Bundle\");",
																	"    pm.expect(response.total).to.eql(0);",
																	"    pm.expect(response.type).to.eql(\"searchset\");",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdateRange}}",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "family",
																	"value": "{{family}}"
																},
																{
																	"key": "gender",
																	"value": "{{gender}}"
																},
																{
																	"key": "birthdate",
																	"value": "{{birthdateRange}}"
																}
															]
														},
														"description": "Where a DOB is above the upper date of DOB date range, the Patient should not be found"
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "exact-match",
									"item": [
										{
											"name": "All patients are returned when search query matches many patients all with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d710a9e-c558-4eae-bb23-a041ce609b30",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns all patients with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    scores.forEach(score => {",
															"        pm.expect(score).to.equal(1);        ",
															"    });",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2020-02-11&family=length&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns all patients from a search which matched multiple patients all with a score =1"
											},
											"response": []
										},
										{
											"name": "Only patients with a score of 1 are returned when search query matches many patients",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "460a073a-f44f-427d-bca1-607f0c942a58",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 1 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    let scores = util.getScores();",
															"    pm.expect(scores).to.have.lengthOf(1);",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"})",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to true returns only those patients with a score of 1 from a search which matched multiple patients with scores >0 and <=1"
											},
											"response": []
										},
										{
											"name": "0 patients are returned when search query matches 0 patients with a score of 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a491674d-1208-4601-b014-4a183f4baa99",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 0 patient\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(0);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_exact-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "len*"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "Setting *exact_match* to true returns 0 patients from a search which matched multiple patients all with a score <1"
											},
											"response": [
												{
													"name": "0 patients returned respose",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "200000000610"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "1234567890"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "1234567890"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?_exact-match=true&birthdate=ge2020-02-11&family=len*&gender=male",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_exact-match",
																	"value": "true"
																},
																{
																	"key": "birthdate",
																	"value": "ge2020-02-11"
																},
																{
																	"key": "family",
																	"value": "len*"
																},
																{
																	"key": "gender",
																	"value": "male"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Server",
															"value": "nginx"
														},
														{
															"key": "Date",
															"value": "Thu, 27 Feb 2020 09:01:42 GMT"
														},
														{
															"key": "Content-Type",
															"value": "application/json"
														},
														{
															"key": "Content-Length",
															"value": "123"
														},
														{
															"key": "Connection",
															"value": "keep-alive"
														},
														{
															"key": "Etag",
															"value": "\"484cd9e73bb551f9156572bd7c3379a45d286549\""
														}
													],
													"cookie": [],
													"body": "{\n    \"entry\": [],\n    \"resourceType\": \"Bundle\",\n    \"timestamp\": 1582794102,\n    \"total\": 0,\n    \"type\": \"searchset\"\n}"
												}
											]
										},
										{
											"name": "Exact match as false returns all matched patients regardless of score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59da75e3-b0e4-41a0-a6b6-46557703a944",
														"exec": [
															"var response = JSON.parse(responseBody);",
															"const util = eval(globals.patient);",
															"var scores = util.getScores();    ",
															"",
															"pm.test(\"Returns status code 200 OK\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Returns 3 patients in total\", () => {",
															"    pm.expect(util.getTotalNumberOfPatients()).to.equal(3);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score of 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});",
															"",
															"pm.test(\"Returns a patient with a score < 1\", () => {",
															"    pm.expect(scores).to.be.an('array').that.includes(1);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e907984f-61d3-41b0-a7cd-6aabbb4ddd3f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?birthdate=2015-12-15&family=Stephen&_fuzzy-match=true&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "Setting *exact_match* to false returns all patients from a search matching multiple patients with scores > 0 and <=1"
											},
											"response": []
										}
									],
									"description": "Every result includes a score from 0 to 1.\n\nScores less than 1 can happen when parameters supplied do not exactly match the values on the patient record. Results are sorted best-first. You can request to only return exact matches (score = 1) using the _exact-match parameter.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d707259d-e1f8-49f9-b896-f25656520200",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "db147690-c37d-4038-b2f4-5c6512fbd295",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "fuzzy-match",
									"item": [
										{
											"name": "Mismatching General Practitioner reduces match score against search without General Practitioner",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c3a8b581-ee28-4dba-8387-bbfb29c06685",
														"exec": [
															"const nhsNumber = '5900002365';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bb86365e-d224-4aa4-a9b2-f658debb6861",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 5900002365\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900002365');",
															"});",
															"",
															"pm.test(\"Patient matching score has decreased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.above(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy&general-practitioner=A200",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														},
														{
															"key": "general-practitioner",
															"value": "A200"
														}
													]
												},
												"description": "Validates a mismatching General Practitioner reduces the amtch score against the same search without General Practitioner"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search handles transposed family names",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d5fbd792-43f2-48ed-bd5e-d9ebee0de3c0",
														"exec": [
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"// Send request with _fuzzy-match=false to make sure no patients are returned",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + '/Patient?_fuzzy-match=false&family=James&birthdate=2000-01-01&given=David&gender=male',",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    pm.test('@Before: fuzzy-match set to false returns 0 patients', () => {",
															"        console.log('@Before Request: ' + JSON.stringify(res.json()));",
															"        pm.expect(res.json().total).to.equal(0);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "db7eaeda-40b6-425f-8305-fbc8fa53593d",
														"exec": [
															"var response = pm.response.json().entry[0];",
															"",
															"pm.test('@Ater: fuzzy-match set to true returns status code 200', () =>{",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('Returns 1 patient', () => {",
															"    pm.expect(pm.response.json().total).to.equal(1);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 5900004171\", () =>{",
															"   pm.expect(response.resource.id).to.equal('5900004171');",
															"});",
															"",
															"pm.test(\"Returns patient with family name 'David'\", () => {",
															"    pm.expect(response.resource.name[0].family).to.equal(\"David\");",
															"});",
															"",
															"pm.test(\"Returns patient with given name 'James'\", () => {",
															"    pm.expect(response.resource.name[0].given).to.contain('James');",
															"});",
															"",
															"pm.test(\"Returns patient with birthdate=2000-01-01\", () =>{",
															"    pm.expect(response.resource.birthDate).to.equal('2000-01-01');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "James"
														},
														{
															"key": "birthdate",
															"value": "2000-01-01"
														},
														{
															"key": "given",
															"value": "David"
														},
														{
															"key": "gender",
															"value": "male"
														}
													]
												},
												"description": "If no patients are matched, using fuzzy-match a check is performed for transposed names such as Adam Thomas and Thomas Adam (family and given names). This test asserts that when doing a fuzzy-match search, patients with transposed names are successfully matched"
											},
											"response": []
										},
										{
											"name": "Mismatching Date of Death reduces match score against same search without Date of Death",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a122dee6-c481-4ec6-86b8-d616785aa84a",
														"exec": [
															"const nhsNumber = '5900002365';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cbf1f218-ecab-4ca3-a7ba-aa627ccdb9f9",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let initialScore = pm.variables.get(\"initialScore\");",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has decreased\", () => {",
															"    pm.expect(initialScore).to.be.above(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&death-date=2020-02-01&family=length&birthdate=2020-02-11&given=Selena",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "death-date",
															"value": "2020-02-01"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "given",
															"value": "Selena"
														}
													]
												},
												"description": "Validate that a fuzzy-search using a mismatching date of death reduces the match score against the same search without a date of death"
											},
											"response": []
										},
										{
											"name": "Fuzzy Search handles family name homophone",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "aca23093-c635-487f-b24b-a37740f7c8f5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f8806b67-5c8c-4543-bf88-07487356cec6",
														"exec": [
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns 3 patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.eql(3);",
															"});",
															"",
															"pm.test(\"Returns both patient Steven and Stephen\", () => {",
															"    let names = getFamilyNameOfAllPatients();",
															"    pm.expect(names).to.contain(\"Steven\");",
															"    pm.expect(names).to.contain(\"Stephen\");",
															"    ",
															"});",
															"",
															"",
															"",
															"// Retrieves the family name of all patients",
															"function getFamilyNameOfAllPatients() {",
															"    var names = [];",
															"",
															"    for(i = 0; i < response.entry.length; i++) {",
															"        names.push(response.entry[i].resource.name[0].family);",
															"    }",
															"",
															"    return names;",
															"};"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Fuzzy search  returns valid response when using minimum search plus non mandatory",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9affecfe-9faa-4ede-9964-f965e57ffbe7",
														"exec": [
															"pm.variables.set('params', params = [",
															"   ",
															"    // Requests using just mandatory parameters required for a fuzzy search",
															"    { parameter: \"DOB, Family & Given\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=leng&given=Selena', expected: 200 },",
															"    { parameter: \"Gender, DOB, Family & PostCode\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&family=leng&address-postcode=DN16 6BB', expected: 200 },",
															"    { parameter: \"Gender, DOB, Given & PostCode\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&address-postcode=DN16&given=Selena', expected: 200 },",
															"",
															"    // Requests using bpth mandatory and extra valid parameters for a fuzzy search",
															"    { parameter: \"DOB, Family, Given & Postcode\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=len&address-postcode=DN16&given=Selena', expected: 200 },",
															"    { parameter: \"Gender, DOB, Family, PostCode & Given\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&address-postcode=DN16&given=Selena&family=len', expected: 200 }",
															"]);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fdb8948e-b9b9-4ad9-a43b-1861dcd36093",
														"exec": [
															"var response = pm.response.json();",
															"",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"let params = pm.variables.get('params');",
															"",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            authorization",
															"        }",
															"    }, function (err, res) {",
															"        console.log(\"Response for \" + p.parameter, res.json());",
															"",
															"        pm.test(\"Returns Status code \" + p.expected + \" for parameters \" + p.parameter, function () {",
															"            pm.expect(res.code).to.equal(p.expected);",
															"        });",
															"",
															"        if (p.expected === 400) {",
															"            pm.test(\"Returns INVALID_COMBINATION when using parameters \" + p.parameter, () => {",
															"                pm.expect(res.json().issue[0].details.coding[0].code).to.equal('FUZZY_CRITERIA_NOT_MET', 'invalid code');",
															"                pm.expect(res.json().issue[0].details.coding[0].display).to.equal('A fuzzy search was requested however the data given did not meet the fuzzy search criteria', 'invalid display message');",
															"                pm.expect(res.json().issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system link');",
															"                pm.expect(res.json().issue[0].severity).to.equal('error', 'invalid severity');",
															"            });",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&birthdate=2015-12-15&given=FuzzyYYYYYY",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "FuzzyYYYYYY"
														}
													]
												},
												"description": "Validates search parameter combinations for a fuzzy search\n- Minimum parameters combinations return a 200 response\n-- given name, family name and date of birth\n-- family name, date of birth, gender and postcode\n-- given name date of birth, gender and postcode\n\n- Mandatory plus non-mandatory parameter combinations return a 200 response\n-- DOB, Family, Given & Postcode\n-- Gender, DOB, Family, PostCode & Given"
											},
											"response": []
										}
									],
									"description": "The search will perform phonetic matching on names using soundex, transpose names, and score the results. If the fields death-date or general-practitioner are provided they will be ignored in this search. This search is performed using a combination of parameters. If an invalid combination is supplied _INVALID_COMBINATION_ will be returned.\n\n- Matching common homophones, such as ‘Smith’ and ‘Smythe’\n- Checking for transposed names, such as ‘Adam Thomas’ and ‘Thomas Adam’\n- Phonetic matching using soundex\n\n",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "result scoring",
									"item": [
										{
											"name": "Search matching criteria exactly returns Patient with score = 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "25d46f1e-8ac9-47ff-aa9a-0e97a8c1b495",
														"exec": [
															"let response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns 1 patient\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
															"});",
															"",
															"pm.test(\"Returns patient with Nhs Number 5900016528\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('5900016528');",
															"})",
															"",
															"pm.test(\"Returns score which is a number\", () => {",
															"    pm.expect(response.entry[0].search.score).to.be.a('number');",
															"});",
															"",
															"pm.test(\"Returns patient with score = 1\", () => {",
															"    pm.expect(response.entry[0].search.score).to.equal(1);",
															"})"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family=Toe&given=Mary&gender=male&birthdate=2001-10-10",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "Toe"
														},
														{
															"key": "given",
															"value": "Mary"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2001-10-10"
														}
													]
												},
												"description": "Validate search which matches criteria exactly returns Patient with score of 1"
											},
											"response": []
										},
										{
											"name": "Simple Patient retrieval does not return a matched score",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d97a3125-6b09-4f58-bc78-457ef43d346a",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns patient without a scoring\", () =>{",
															"    pm.expect(response).to.not.have.property('search');",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient/5900016528",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient",
														"5900016528"
													]
												},
												"description": "Validate a patient retrieve does not return a matched score"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score between 0 and 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "45e72fb0-6aa5-43a3-885b-a75969f194ab",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patient().getTotalNumberOfPatients()).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Returns patients each with a score between 0 and 1\", () =>{",
															"    let scores = patient().getScores();",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.at.least(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												},
												"description": "For a wildcard based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Matching score increases when being more specific with Search query parameters",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59d6c839-2b4d-4c80-9f1c-6149cccd2d68",
														"exec": [
															"var response = pm.response.json();",
															"let globalNhsNumber = response.entry[0].resource.id;",
															"let globalScore = response.entry[0].search.score;",
															"let highestScore = globalScore;",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"",
															"",
															"let params = [",
															"    { parameter: \"Post Code\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16 3*'},",
															"    { parameter: \"Family Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16*'},",
															"    { parameter: \"Given Name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&given=Selena'},",
															"    { parameter: \"PostCode, Family and Given name\", query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3*&given=Selena'}",
															"]",
															"",
															"params.forEach(p => {",
															"    pm.sendRequest({",
															"        url: pm.environment.get(\"environment\") + p.query,",
															"        method: 'GET',",
															"        header: {",
															"            asidHeader,",
															"            sessionURIDHeader,",
															"            identityUUIDHeader,",
															"            authorization",
															"    }",
															"    }, function (err, res) {",
															"        let newScore = res.json().entry[0].search.score;",
															"        ",
															"        pm.test(\"Matching score increases when being more specific with \" + p.parameter + \" query parameter(s)\", () => {",
															"            console.log(\"Response for \" + p.parameter + \": \" + JSON.stringify(res.json()));",
															"            pm.expect(globalNhsNumber).to.be.equal(res.json().entry[0].resource.id, 'not the same patient as nhs numbers are different');",
															"            pm.expect(globalScore).to.be.below(newScore);",
															"        });",
															"        ",
															"        if(p.parameter != 'PostCode, Family and Given name') {",
															"            highestScore = newScore > highestScore ? newScore : highestScore;",
															"        } else {",
															"            pm.test(\"Matching score is at it's highest when being more specific with multiple query parameters (PostCode, Family and Given name)\", () => {",
															"                pm.expect(newScore).to.be.above(highestScore);",
															"            })",
															"        }",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b9b282e8-e86b-41e2-aaf0-950fab6d7ee4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														}
													]
												},
												"description": "Validates that the returned patients score increases when being more specific with the following search query parameters\n- Post Code\n- Family Name\n- Given Name\n- Multiple (Post Code, Family name and Given name)"
											},
											"response": []
										},
										{
											"name": "Matching General Practitioner increases match score against the same search without General Practitioner",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "72927071-f840-43d2-8c5f-1ce6ad6a0558",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691184087\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691184087');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.below(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f14f8b7f-7165-40a8-b7d4-6c8f72894041",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-12&family=le*&address-postcode=DN16*&general-practitioner=A20047",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-12"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														},
														{
															"key": "general-practitioner",
															"value": "A20047"
														}
													]
												},
												"description": "Performing an alphanumeric search using a matching general-practitioner increases the patient's matching score"
											},
											"response": []
										},
										{
											"name": "Matching Date of Death increases match score against the same search without Date of Death",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "74d81563-f5af-4ad9-8f92-42cc718dc8b2",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    ",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.be.below(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9b3e90b9-1fb9-401a-820b-396400c32cfe",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=le*&address-postcode=DN16*&death-date=2020-03-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "address-postcode",
															"value": "DN16*"
														},
														{
															"key": "death-date",
															"value": "2020-03-01"
														}
													]
												},
												"description": "Performing an alphanumeric search using a matching death-date increases the patient's matching score"
											},
											"response": []
										},
										{
											"name": "Matching Date of Death does not affect match score if already 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ae34c811-2c3c-4594-b62a-f8eed7fef72d",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183994\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183994');",
															"});",
															"",
															"pm.test(\"Patient matching score has remained at 1\", () => {",
															"    ",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.equal(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "251fd086-c39c-486c-93bf-bc6b3219f82f",
														"exec": [
															"const nhsNumber = '9691183994';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-11&family=length&address-postcode=DN16 3BB\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber, \"invalid patient data\");",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.expect(initialScore).to.equal(1, \"invalid patient data\")",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-11&family=length&address-postcode=DN16 3BB&death-date=2020-03-01",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-11"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "address-postcode",
															"value": "DN16 3BB"
														},
														{
															"key": "death-date",
															"value": "2020-03-01"
														}
													]
												},
												"description": "Performing an alphanumeric search using the correct death-date does not affect the patient's matching score when it's already 1"
											},
											"response": []
										},
										{
											"name": "Matching General Practitioner does not affect match score if already 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d79da03-8392-4c0a-957a-996321d2fe6a",
														"exec": [
															"eval(pm.globals.get(\"patient\"));",
															"let response = pm.response.json();",
															"let newScore = response.entry[0].search.score;",
															"console.log(\"New score: \" + newScore);",
															"",
															"pm.test(\"Returns status code 200\", () => {",
															"    pm.response.to.have.status(200);",
															"})",
															"",
															"pm.test(\"Returns patient with NHS number 9691183986\", () => {",
															"    pm.expect(response.entry[0].resource.id).to.equal('9691183986');",
															"});",
															"",
															"pm.test(\"Patient matching score has increased\", () => {",
															"    pm.expect(pm.variables.get(\"initialScore\")).to.equal(newScore);",
															"});",
															"",
															"pm.test(\"Patient matching score is a valid score\"), () => {",
															"    pm.expect(newScore).to.be.atLeast(0);",
															"    pm.expect(newScore).to.be.atMost(1);",
															"};"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "264f8ac9-9e9b-4b79-a826-45af91667c33",
														"exec": [
															"const nhsNumber = '9691183986';",
															"let asidHeader = pm.environment.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"pm.sendRequest({",
															"    url: pm.environment.get(\"environment\") + \"/Patient?gender=male&birthdate=2020-02-12&family=length&address-postcode=DN18 5DG\",",
															"    method: 'GET',",
															"    header: {",
															"        asidHeader,",
															"        sessionURIDHeader,",
															"        identityUUIDHeader,",
															"        authorization",
															"    }",
															"}, function (err, res) {",
															"    console.log(\"Pre-request Request: \" + JSON.stringify(res.json()));",
															"    pm.expect(res.json().entry[0].resource.id).to.equal(nhsNumber);",
															"    let initialScore = res.json().entry[0].search.score;",
															"    pm.variables.set(\"nhsNumber\", nhsNumber);",
															"    pm.variables.set(\"initialScore\", initialScore);",
															"    console.log('NHS Number:' + nhsNumber + \" Score: \" + initialScore);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "88888"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=2020-02-12&family=length&address-postcode=DN18 5DG&general-practitioner=A20047",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "2020-02-12"
														},
														{
															"key": "family",
															"value": "length"
														},
														{
															"key": "address-postcode",
															"value": "DN18 5DG"
														},
														{
															"key": "_fuzzy-match",
															"value": "true",
															"disabled": true
														},
														{
															"key": "general-practitioner",
															"value": "A20047"
														}
													]
												},
												"description": "Performing an alphanumeric search using the correct general-practitioner does not affect the patient's matching score when it's already 1"
											},
											"response": []
										},
										{
											"name": "Fuzzy search returns multiple patients each with a matched score between 0 and 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "738fc8f2-8b35-4c86-866e-63c586282891",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6e2da2cc-bcfe-48b3-b47e-45d7aea1d48f",
														"exec": [
															"var response = pm.response.json();",
															"eval(pm.globals.get(\"assertThatUtil\"));",
															"eval(pm.globals.get(\"patient\"));",
															"",
															"let scores = patient().getScores();",
															"let numberOfPatients = patient().getTotalNumberOfPatients();",
															"",
															"assertThatUtil().statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () => {",
															"    pm.expect(numberOfPatients).to.be.above(1);",
															"})",
															"",
															"pm.test(\"Each patient has a score\", () =>{",
															"    pm.expect(numberOfPatients).to.equal(scores.length)",
															"});",
															"",
															"pm.test(\"Each score is a number\", () => {",
															"   scores.forEach(score => {",
															"       pm.expect(score).to.be.a('number');",
															"   }) ",
															"});",
															"",
															"pm.test(\"Each score is between 0 and 1\", () => {",
															"    scores.forEach(score => {",
															"        var tmp = parseFloat(score)",
															"        pm.expect(tmp).to.be.above(0);",
															"        pm.expect(tmp).to.be.at.most(1);",
															"    });",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For a fuzzy-search based search which results in multiple patients being retured. Each patient is given a score.\n\nThis test is to validate that:\n- The score given to each patient is > 0 and < 1"
											},
											"response": []
										},
										{
											"name": "Search matching multiple patients returns each patient with matching score sorted by score best-first",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ca5dc8f2-07e3-4c2d-b78c-0a84e1ed969a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6eaa7f0f-0339-4de7-bafe-6c5116ba0197",
														"exec": [
															"var chai = require(\"chai\");",
															"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
															"const patientUtil = eval(pm.globals.get(\"patient\"));",
															"var response = pm.response.json();",
															"",
															"assertThat.statusCodeIs(200);",
															"",
															"pm.test(\"Returns multiple patients\", () =>{",
															"    pm.expect(patientUtil.getTotalNumberOfPatients()).to.be.above(1);",
															"});",
															"",
															"pm.test(\"Returns result scoring sorted best-first\", () => {",
															"    let scores = patientUtil.getScores();",
															"    ",
															"    for (i = 1; i < scores.length; i++) {",
															"        let previous = parseFloat(scores[i-1]);",
															"        let current = parseFloat(scores[i]);",
															"        pm.expect(current).to.be.at.most(previous);        ",
															"      }",
															" });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "{{from_asid}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "{{role_id}}",
														"type": "text"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "{{user_id}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												},
												"description": "For alphanumeric searching, every result includes a score from 0 to 1. \n\nThis test is to validate that\n- Results are sorted best-first i.e. 1 to 0"
											},
											"response": []
										}
									],
									"description": "Every matched patient in the results list includes a score to indicate how closely the patient matched the search parameters. A score of 1.0 indicates an exact match. A score of less than 1.0 indicates a partial match. The result list is sorted in descending score order - best match first.",
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "other tests",
									"item": [
										{
											"name": "Multiple Wildcards permitted - family",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "849826ff-b5e5-4529-9f2b-06a964af8eaf",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f4c3358-2ce1-4025-87c5-e42a617da043",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "general-practitioner",
															"value": "Y0001",
															"disabled": true
														}
													]
												},
												"description": "Multiple wildcards are permitted in family name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - given",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "54e67e87-3221-4d0b-8b5c-2805351fc67c",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5af433b8-d756-4fcf-a56a-cff9c2e20d83",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in given name"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ada857e2-4972-4265-809b-95417ee3e27c",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9058b909-c377-4e41-b3c0-cd50bf713c97",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{family}}&gender={{gender}}&birthdate={{birthdate}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{family}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in postCode"
											},
											"response": []
										},
										{
											"name": "Multiple Wildcards permitted - family, given & postCode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "978f31a6-a69b-4e01-8e0c-5454c33db680",
														"exec": [
															"/*set variables for test*/",
															"",
															"pm.variables.set(\"familyQ\", \"Ma\\*pi\\*g\");",
															"pm.variables.set(\"givenQ\", \"Se\\*r\\*h\");",
															"pm.variables.set(\"postalCodeQ\", \"BD\\* \\*LY\");",
															"pm.variables.set(\"family\", \"Mapping\");",
															"pm.variables.set(\"gender\", \"female\");",
															"pm.variables.set(\"birthdate\", \"2010-01-01\");",
															"",
															"//5900009068",
															"/*set variables for checking mapping*/",
															"",
															"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
															"",
															"pm.variables.set(\"prefix\", \"Dame\");",
															"pm.variables.set(\"nameType\", \"Usual name\");",
															"pm.variables.set(\"addressType\", \"usual\");",
															"pm.variables.set(\"telecomType\", \"telephone\");",
															"pm.variables.set(\"telecomUse\", \"home\");",
															"",
															"pm.variables.set(\"given\", [\"Search\",\"Again\"]);",
															"pm.variables.set(\"suffix\", [\"MBA\",\"PHD\"]);",
															"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
															"pm.variables.set(\"addressLine\",JSON.stringify([\"1\",\"westwood\",\"ecclechill\",\"bradfordian\"]));",
															"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
															"pm.variables.set(\"patientId\", \"5900009068\");",
															"pm.variables.set(\"metaVersionId\", \"15\");",
															"pm.variables.set(\"resourceType\", \"Patient\");",
															"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
															"pm.variables.set(\"telecomValue\", \"07900000000\");",
															"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
															"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
															"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
															"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d96514e5-a348-4638-ae9d-7f0458643690",
														"exec": [
															"var response = pm.response.json();",
															"",
															"// Apply Common Mapping Tests",
															"//======================================",
															"eval(pm.globals.get(\"checkSearchMappings\"))();",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?family={{familyQ}}&gender={{gender}}&birthdate={{birthdate}}&given={{givenQ}}&address-postcode={{postalCodeQ}}",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "family",
															"value": "{{familyQ}}"
														},
														{
															"key": "gender",
															"value": "{{gender}}"
														},
														{
															"key": "birthdate",
															"value": "{{birthdate}}"
														},
														{
															"key": "given",
															"value": "{{givenQ}}"
														},
														{
															"key": "address-postcode",
															"value": "{{postalCodeQ}}"
														}
													]
												},
												"description": "Multiple wildcards are permitted in family, given & postCode"
											},
											"response": []
										},
										{
											"name": "Search by Postcode ignores whitespacing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dc1bb9a7-6e0a-4270-bb98-0678ac05f417",
														"exec": [
															"let testScenarios = pm.variables.get('testData');",
															"let asidHeader = pm.variables.get(\"asidHeader\");",
															"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
															"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
															"let authorization = pm.environment.get(\"authorizationHeader\");",
															"",
															"testScenarios.forEach(scenario => {",
															"    scenario.tests.forEach(testScript => {",
															"        console.log(\"Test Script: \" + testScript.name);",
															"        ",
															"        testScript.tests.forEach(t => {",
															"            let patientDetails;    ",
															"            let needToSetValues = true;",
															"            console.log(\"Query Type: \" + t.searchType);",
															"            ",
															"            pm.sendRequest({",
															"                url: pm.environment.get(\"environment\") + t.query,",
															"                method: 'GET',",
															"                header: {",
															"                    asidHeader,",
															"                    sessionURIDHeader,",
															"                    identityUUIDHeader,",
															"                    authorization",
															"                }",
															"            }, function (err, res) {            ",
															"                if (needToSetValues) {",
															"                    patientDetails = getNhsNumberAndInitialScore(res.json());                ",
															"                    needToSetValues = false;",
															"                }",
															"                pm.expect(res.code).to.equal(200, 'invalid response returned');",
															"                validateScoreRemainsTheSame(testScript.name + \" - \" + t.searchType, res.json(), patientDetails);",
															"            });",
															"        })",
															"    });",
															"});",
															"",
															"",
															"",
															"function getNhsNumberAndInitialScore(response) {",
															"    return {",
															"        nhsNumber: response.entry[0].resource.id,",
															"        score: response.entry[0].search.score",
															"    };",
															"}",
															"",
															"function validateScoreRemainsTheSame(testName, response, patientDetails) {",
															"    let newScore = response.entry[0].search.score;",
															"    pm.test(testName + ' returns patient ' + patientDetails.nhsNumber + ' with matching score of ' + newScore, () => {",
															"        pm.expect(response.entry[0].resource.id).to.equal(patientDetails.nhsNumber, \"unexpected patient record returned\");",
															"        console.log(testName + ' NHS Number ' + patientDetails.nhsNumber + ' with Score: ' + newScore);",
															"        pm.expect(patientDetails.score).to.equal(newScore);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2ad6ec39-052a-4289-9ea0-cab3df311bde",
														"exec": [
															"let simple = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN16 3BB' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=length&gender=male&address-postcode=DN163BB'}",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M32 8EX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=charles&gender=male&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M32 8XX' },",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=speaker&gender=male&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Simple search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Simple search with spaces', query: '/Patient?birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let algorithmic = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=length&given=Selena&address-postcode=DN16 3BB' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&family=length&birthdate=2020-02-11&&given=Selena&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M32 8EX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=Charles&given=Michael&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M328XX\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M32 8XX' },",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=speaker&given=bose&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Algorithmic search without spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN112EE'},            ",
															"            { searchType: 'Algorithmic search with spaces', query: '/Patient?_fuzzy-match=true&given=Test&birthdate=2020-02-11&family=Spacing&gender=female&address-postcode=DN11 2EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"let alphanumeric = [",
															"    {",
															"        name: \"Patient Postcode: DN16 3BB\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN16 3BB' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=leng*&address-postcode=DN163BB' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8EX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search with spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M32 8EX' },",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=charl*&address-postcode=M328EX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: M32 8XX\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?gender=male&birthdate=2020-02-11&family=speake*&address-postcode=M328XX' }",
															"        ]",
															"    },",
															"    {",
															"        name: \"Patient Postcode: DN112EE\",",
															"        tests: [",
															"            { searchType: 'Alphanumeric search without spaces', query: '/Patient?birthdate=2020-02-11&family=Spaci*&gender=female&address-postcode=DN112EE'},            ",
															"        ]",
															"    }",
															"];",
															"",
															"",
															"pm.variables.set('testData', testScenarios = [",
															"    { tests: simple },",
															"    { tests: alphanumeric },",
															"    { tests: algorithmic }",
															"]);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{from_asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}",
													"host": [
														"{{environment}}"
													]
												},
												"description": "Validates white spaces in postcodes do not affect Searching i.e. you can search for a patient with the;\n- postcode DN163BB using both DN163BB and DN16 3BB\n- postcode DN16 3BB using both DN16 3BB and DN163BB"
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Alphanumeric",
									"item": [
										{
											"name": "By General Practitioner",
											"item": [
												{
													"name": "Search using invalid General Practitioner returns INVALID_VALUE",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "31829761-42d4-46f6-9c45-26d9abb3c6ea",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"errorMessage\"));",
																	"",
																	"assertThatUtil().statusCodeIs(400);",
																	"errorMessage().assertCodeIs(\"INVALID_VALUE\");",
																	"errorMessage().assertDiagnosticsIs(\"Invalid value - '.' in field 'general-practitioner'\");",
																	"errorMessage().assertSeverityIs(\"error\");",
																	"errorMessage().assertDisplayIs(\"Provided value is invalid\");",
																	"errorMessage().assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=.",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "."
																}
															]
														},
														"description": "Validate searching for a patient using an invalid general-practitioner value such as `.` returns an INVALID_VALUE error response"
													},
													"response": []
												},
												{
													"name": "Search using  General Practitioner returns no Patient record when no match is found",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c9133446-5997-471c-a757-817200954f2e",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns 0 patients\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&family=Practitioner&general-practitioner=Y995894&birthdate=ge2000-01-01",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y995894"
																},
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "birthdate",
																	"value": "ge2000-01-01"
																}
															]
														},
														"description": "Validate no patient record is returned when performing a search using criteria including general-practitioner that does not match any patient."
													},
													"response": []
												},
												{
													"name": "Search using valid General Practitioner returns Patient record",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "aab43904-d720-42e9-b07a-49e62ffa6281",
																"exec": [
																	"eval(pm.globals.get(\"assertThatUtil\"));",
																	"eval(pm.globals.get(\"patient\"));",
																	"",
																	"assertThatUtil().statusCodeIs(200);",
																	"",
																	"pm.test(\"Returns one patient\", () =>{",
																	"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
																	"})",
																	"",
																	"pm.test(\"Returns patient with NHS Number 5900014061\", () => {",
																	"    pm.expect(pm.response.json().entry[0].resource.id).to.equal('5900014061');",
																	"})"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "{{nhsd-asid-header}}",
																"type": "text",
																"value": "{{from_asid}}"
															},
															{
																"key": "{{nhsd-session-urid-header}}",
																"type": "text",
																"value": "{{role_id}}"
															},
															{
																"key": "{{nhsd-identity-uuid-header}}",
																"type": "text",
																"value": "{{user_id}}"
															}
														],
														"url": {
															"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Practitioner&general-practitioner=Y00002",
															"host": [
																"{{environment}}"
															],
															"path": [
																"Patient"
															],
															"query": [
																{
																	"key": "_max-results",
																	"value": "50",
																	"disabled": true
																},
																{
																	"key": "gender",
																	"value": "male"
																},
																{
																	"key": "birthdate",
																	"value": "2000-01-01"
																},
																{
																	"key": "family",
																	"value": "Practitioner"
																},
																{
																	"key": "general-practitioner",
																	"value": "Y00002"
																}
															]
														},
														"description": "Validate patients record is returned when searching by general-practitioner"
													},
													"response": []
												}
											],
											"description": "Patient should be searchable by GP Provider using the query parameter *general-practitioner*.\n",
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Sensitive Patient",
							"item": [
								{
									"name": "Search specifying GP of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32c8d63f-1579-4dbe-b96b-11094fc2d4b9",
												"exec": [
													"eval(pm.globals.get(\"patient\"));",
													"",
													"",
													"pm.test(\"Returns status code 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "30077984-e012-4eda-9cc9-ffd8ddf4b78c",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?gender=male&birthdate=2000-01-01&family=Ukraine',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=2000-01-01&family=Ukraine&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												},
												{
													"key": "_max-results",
													"value": "50",
													"disabled": true
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying GP which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47897e50-332d-4045-b131-e1eec74f8fd3",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ab650034-17b5-440d-a319-51a54de759b1",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&general-practitioner=Y00007",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "general-practitioner",
													"value": "Y00007"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n\n> GIVEN I perform a Search specifying general-practitioner  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode of sensitive patient results in patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcd77390-bba6-434e-9e26-45d4a542e76b",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1f8a00fc-3c75-4a49-8457-118b32f3e99d",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Ukraine&gender=male&address-postcode=B4 3PP",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukraine"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "address-postcode",
													"value": "B4 3PP"
												}
											]
										},
										"description": "**NHS Number: 5900013553**\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches one patient\nAND that patient is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed "
									},
									"response": []
								},
								{
									"name": "Search specifying Postcode which matches multiple patients results in sensitive patient not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a7bbf8c-74f6-41e6-a0c0-b8a846b3b057",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patient\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return patient 5900013553\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900013553')).to.be.false",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3551b5a-bdb5-4017-a23a-db026d583117",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?birthdate=2000-01-01&family=Ukraine&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(200, 'invalid response returned');",
													"    pm.expect(res.json().entry[0].resource.id).to.equal('5900013553', 'Nhs number for Sensitive paitent not found');    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*&address-postcode=B4*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												},
												{
													"key": "address-postcode",
													"value": "B4*"
												}
											]
										},
										"description": "NHS Numbers: 5900013553, 5900005194\n\n> GIVEN I perform a Search specifying address-postcode  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the sensitive patients record is not displayed"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including sensitive patient does not return sensitive details for sensitive patient",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ea1a87e-68ea-47e2-9930-d6fcb3866b10",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 2 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(2);",
													"})",
													"",
													"pm.test(\"Returns sensitive patient\", () => {",
													"    pm.expect(response.entry[1].resource.id).to.equal('5900013553');",
													"});",
													"",
													"pm.test(\"Sensitive patients address is not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.address).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients telecome details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.telecom).to.be.undefined;",
													"});",
													"",
													"pm.test(\"Sensitive patients GP details are not displayed\", () => {",
													"    pm.expect(response.entry[1].resource.generalPractitioner).to.be.undefined;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2000-01-01&family=Ukrain*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "Ukrain*"
												}
											]
										},
										"description": "Sensitive Patient NHS Number: 5900013553\n\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a Sensitive patient  \nWHEN I get the response  \nTHEN the following sensitive details are not returned for the sensitive patient (gp, death-notification extension, address and telecom)"
									},
									"response": []
								},
								{
									"name": "Search matching multiple patients including invalid patient does not return invalid patients record",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57b5c691-b9ab-4bc4-843e-c4ae4610e0c0",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Does not return invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900006107')).to.be.false;",
													"});",
													"",
													"pm.test(\"Does return non-invalid patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900003876')).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "41c86353-7177-4f36-a60e-5b5148120976",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=ge2000-01-01&family=invalidated",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "ge2000-01-01"
												},
												{
													"key": "family",
													"value": "invalidated"
												}
											]
										},
										"description": "Invalidated NHS Patient number : 5900006107\n\n> GIVEN I perform a Search  \nAND that matches multiple patients  \nAND one of those patients is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients record is not returned"
									},
									"response": []
								},
								{
									"name": "Search matching sensitive patient returns security object",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af202852-0828-4f03-a155-252b30b86e5d",
												"exec": [
													"var response = pm.response.json();",
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 1 patients\", () => {",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(1);",
													"})",
													"",
													"pm.test(\"Returns Sensitive patient\", () => {",
													"    pm.expect(patient().containsPatientWithNhsNumber('5900004430')).to.be.true;",
													"});",
													"",
													"pm.test(\"Returns Security object\", () => {",
													"    pm.expect(response.entry[0].resource.meta.security[0].code).to.equal('R', 'invalid code');",
													"    pm.expect(response.entry[0].resource.meta.security[0].display).to.equal('restricted', 'invalid display');",
													"    pm.expect(response.entry[0].resource.meta.security[0].system).to.equal('https://www.hl7.org/fhir/valueset-security-labels.html', 'invalid system');",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6f840e01-fd11-4895-b936-a87c2891326a",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient/5900006107',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {               ",
													"    pm.expect(res.code).to.equal(404, 'invalid patient does not exist');",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=female&birthdate=2001-02-01&family=sensitive",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "2001-02-01"
												},
												{
													"key": "family",
													"value": "sensitive"
												}
											]
										},
										"description": "> GIVEN I perform a Search\nAND that matches a Sensitive patient\nWHEN I get the response  \nTHEN the Patients record includes the meta.security array  \nAND the array includes the **R** *restricted level*"
									},
									"response": []
								},
								{
									"name": "Search matching invalid patient only, results in patients data not being returned",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca23c36d-9255-4812-b22e-1b098f0ebd5c",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"",
													"pm.test(\"Returns 0 patients\", () =>{",
													"    pm.expect(patient().getTotalNumberOfPatients()).to.equal(0);",
													"})"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6213415f-b2b3-4ae8-861a-adc4607376b7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}",
												"type": "text"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?birthdate=2000-01-01&family=Invalidated&gender=female&given=Patient",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "family",
													"value": "Invalidated"
												},
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "given",
													"value": "Patient"
												}
											]
										},
										"description": "**NHS Number: 5900006107**\n\n> GIVEN I perform a Search  \nAND that matches one patient\nAND that patient is a invalid patient  \nWHEN I get the response  \nTHEN the invalid patients details are not returned"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Error Responses",
							"item": [
								{
									"name": "Search invalid ASID - ACCESS_DENIED",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ce800598-e337-4661-a8f4-1b53eef8bd40",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c0955274-53f8-4aba-b896-b4c6172a7eb0",
												"exec": [
													"// This test should not be executed against apigee direct as apigee automatically sends a valid asid header",
													"if (pm.environment.get('skipTest')) {",
													"    console.log('Skipping test when running via apigee');",
													"} else {",
													"    const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"    const error = eval(pm.globals.get(\"errorMessage\"));",
													"    assertThat.statusCodeIs(401)",
													"    error.assertCodeIs(\"ACCESS_DENIED\");",
													"    error.assertDisplayIs(\"Access Denied - Unauthorised\");",
													"    error.assertSeverityIs(\"error\");",
													"    error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "123456789"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=James&birthdate=2000-01-01&given=David&gender=male",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												}
											]
										},
										"description": "where an invalid ASID is passed into the request Header ACCESS_DENIED is returned"
									},
									"response": []
								},
								{
									"name": "Search invalid query parameters - INVALID_VALUE / INVALID_SEARCH_DATA / ADDITIONAL_PROPERTIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db00bc36-00fb-482a-a510-a134ead8ba1a",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].diagnostics).to.eql(scenario.diagnostics, 'invalid diagnostics');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b7164015-1020-43b4-9744-0f2ff21ea73d",
												"exec": [
													"pm.variables.set('testData', data = [",
													"   { name: \"Invalid Max_results value - blank\", ",
													"      code: \"INVALID_VALUE\",",
													"      diagnostics: \"Invalid value - '' in field '_max-results'\",",
													"      display: \"Provided value is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?_max-results=&gender=male&birthdate=ge2020-02-11&family=le*'},",
													"      ",
													"   { name: \"Invalid Max_results value - 51\", ",
													"      code: \"INVALID_VALUE\",",
													"      diagnostics: \"Invalid value - '51' in field '_max-results'\",",
													"      display: \"Provided value is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?_max-results=51&gender=male&birthdate=ge2020-02-11&family=le*'},",
													"",
													"   { name: \"Invalid GP Practice format\", ",
													"      code: \"INVALID_VALUE\",",
													"      diagnostics: \"Invalid value - '12*' in field 'general-practitioner'\",",
													"      display: \"Provided value is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&birthdate=2000-01-01&given=David&gender=male&general-practitioner=12\\*'},",
													"",
													"   { name: \"Invalid Date Of DOD format\", ",
													"      code: \"INVALID_VALUE\",",
													"      diagnostics: \"Invalid value - '01-01-2000' in field 'death-date'\",",
													"      display: \"Provided value is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&death-date=01-01-2000&given=David&gender=male'},",
													"",
													"    { name: \"Invalid Date Of DOB format\", ",
													"      code: \"INVALID_VALUE\",",
													"      diagnostics: \"Invalid value - '01-01-2000' in field 'birthdate'\",",
													"      display: \"Provided value is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=James&birthdate=01-01-2000&given=David&gender=male'},",
													"",
													"    { name: \"Special characters in query parameter values such as family\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'name.family'\",",
													"      display: \"Search data is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=%$£James&birthdate=2000-01-01&given=David&gender=male'},",
													"",
													"    { name: \"Special characters in query parameter values such as given\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'name.given'\",",
													"      display: \"Search data is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=%$£David&gender=male'},",
													"      ",
													"    { name: \"Special characters in option based values such as gender\", ",
													"      code: \"INVALID_VALUE\",",
													"      diagnostics: \"Invalid value - 'male$' in field 'gender'\",",
													"      display: \"Provided value is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male$'},",
													"      ",
													"    { name: \"Special characters in option based values such as postcode\", ",
													"      code: \"INVALID_VALUE\",",
													"      diagnostics: \"Invalid value - 'BD$ 2NB' in field 'address-postcode'\",",
													"      display: \"Provided value is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&address-postcode=BD$ 2NB'},",
													"      ",
													"    { name: \"Special characters in ‘new unsupported fields’\", ",
													"      code: \"ADDITIONAL_PROPERTIES\", ",
													"      diagnostics: \"Invalid update with error - Additional properties are not allowed ('somethingnew' was unexpected)\",",
													"      display: \"Additional properties should not be included\",",
													"      severity: \"error\",",
													"      query: '/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&somethingnew=fda'},",
													"      ",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male$",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male$"
												}
											]
										},
										"description": "##### Scenarios Tested\n- Invalid characters in Max_results\n- Invalid characters in General Practitioner\n- Invalid DOB format\n- Invalid DOD format\n- Special characters in option based values such as gender\n- Special characters in option based values such as postcode\n- Special characters in query parameter values such as family\n- Special characters in ‘new unsupported fields’\n\n\n\n\n> GIVEN I have a Search query containing special/invalid characters  \nWHEN I perform a Search  \nTHEN I should get the correct FHIR based error response"
									},
									"response": []
								},
								{
									"name": "Security validation is performed before request validation when performing a Search",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59e0ec38-8467-440b-b1be-f0b83d740dbc",
												"exec": [
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"\tlet asidTokenHeader = pm.environment.get('skipTest') ? getToken(scenario.asid) : getAsidHeader(scenario.asid)",
													"",
													"\tpm.sendRequest({",
													"\t\turl: pm.environment.get(\"environment\") + '/Patient?' + scenario.query,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\tasidTokenHeader,",
													"\t\t\tsessionURIDHeader,",
													"\t\t\tidentityUUIDHeader\t\t\t",
													"\t\t}",
													"\t}, function (err, res) {",
													"\t\tpm.test(scenario.name + \" Returns Status code \" + scenario.expectedStatus, function () {",
													"\t\t\tpm.expect(res.code).to.equal(scenario.expectedStatus, 'invalid response returned');",
													"\t\t});",
													"",
													"\t\tif (scenario.expectedStatus == 400) {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ADDITIONAL_PROPERTIES\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ADDITIONAL_PROPERTIES');",
													"\t\t\t});",
													"",
													"\t\t} else {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ACCESS_DENIED\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ACCESS_DENIED');",
													"\t\t\t});",
													"\t\t}",
													"\t});",
													"",
													"});",
													"",
													"function getToken(type) {",
													"\tlet token;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\ttoken = pm.globals.get(\"token\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\ttoken = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\ttoken = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: 'Authorization',",
													"\t\tvalue: 'Bearer ' + token",
													"\t}",
													"}",
													"",
													"function getAsidHeader(type) {",
													"\tlet asid;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\tasid = pm.environment.get(\"from_asid\");",
													"\t\t\tif(pm.environment.get('skipTest')) {",
													"\t\t\t\t// Running against apigee therefore do not set an asid -- let apigee send a valid one directly",
													"\t\t\t\treturn undefined",
													"\t\t\t}",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\tasid = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\tasid = '';",
													"\t\t\tbreak;",
													"\t}",
													"",
													"\t",
													"\treturn {",
													"\t\tkey: pm.globals.get(\"nhsd-asid-header\"),",
													"\t\tvalue: asid",
													"\t}",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c60396dc-05a2-42be-ad83-f9f9ef7f526f",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"Valid asid/token and Invalid Search request\", asid: 'valid', query: 'faaaaamily=Smith&given=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 400},",
													"\t{ name: \"Invalid asid/token and Invalid Search request\", asid: 'invalid', query: 'family=Smith&givvvvven=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Invalid Search request\", asid: 'missing', query: 'family=Smith&given=Jane&gender=female&birthhhhdate=2010-10-22', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Valid Search request\", asid: 'missing', query: 'family=Smith&given=Jane&gender=female&birthdate=2010-10-22', expectedStatus: 401}",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}",
											"host": [
												"{{environment}}"
											]
										},
										"description": "Security checks should be performed first to prevent information leakage.\n\nValidates when sending requests which have both a invalid asid and search query parameter, validation is performed on the asid first, thus throwing a 401 Unauthorized instead of query param validation i.e. 400 Bad Request"
									},
									"response": []
								},
								{
									"name": "Search unrecognised query parameters - ADDITIONAL_PROPERTIES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "893b5cf4-7747-4466-8c92-e7a702c29e6c",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"eval(pm.globals.get(\"errorMessage\"));",
													"const query = '/Patient?gender=male&birthdate=1925-02-11&family=smith&address-postcode=DN153PP&given=john&death-date=2020-02-11&general-practitioner=V0007'",
													"",
													"let params = [",
													"    { parameter: \"family\", queryParam: 'faamily' },",
													"    { parameter: \"given\", queryParam: 'giveeen' },",
													"    { parameter: \"gender\", queryParam: 'gendr' },",
													"    { parameter: \"birthdate\", queryParam: 'birthdat' },",
													"    { parameter: \"death-date\", queryParam: 'deathdate' },",
													"    { parameter: \"address-postcode\", queryParam: 'address-PostCod' },",
													"    { parameter: \"general-practitioner\", queryParam: 'general-practiner' },            ",
													"]",
													"",
													"params.forEach(p => {",
													"    let query = getQuery(p.parameter, p.queryParam);",
													"    console.log(\"Request url: \" + query);",
													"",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        let response = res.json();",
													"        console.log(\"Response: \" + response);",
													"        ",
													"        pm.test('Returns valid error response when misspelling parameter ' + p.parameter, () => {",
													"            pm.expect(response.issue[0].diagnostics).to.equal(getExpectedErrorMessage(p.queryParam));",
													"            pm.expect(response.issue[0].details.coding[0].display).to.equal('Additional properties should not be included');",
													"            pm.expect(response.issue[0].details.coding[0].code).to.equal('ADDITIONAL_PROPERTIES');",
													"            pm.expect(response.issue[0].severity).to.equal('error');",
													"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');",
													"            ",
													"        })",
													"    })",
													"});",
													"",
													"",
													"function getExpectedErrorMessage(param) {",
													"    return 'Invalid update with error - Additional properties are not allowed (\\'' + param + '\\' was unexpected)';",
													"}",
													"",
													"function getQuery(parameter, replaceWith) {",
													"    console.log('Replacing ' + parameter + ' with ' + replaceWith);",
													"    return query.replace(parameter, replaceWith);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2020-02-11&family=length",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2020-02-11"
												},
												{
													"key": "family",
													"value": "length"
												}
											]
										},
										"description": "Passing in unrecognised search query parameters returns an ADDITIONAL_PROPERTIES error message which highlights which values were unrecognized"
									},
									"response": [
										{
											"name": "EXTRA_VALUE error response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-resultsA=50&gender=male&birthdate=ge2020-02-11&family=le*&_exact-matchB=false&_fuzzy-matchC=true",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-resultsA",
															"value": "50"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "_exact-matchB",
															"value": "false"
														},
														{
															"key": "_fuzzy-matchC",
															"value": "true"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 13:31:38 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "625"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('_exact-matchB', '_fuzzy-matchC', '_max-resultsA' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										},
										{
											"name": "Unrecognised search query parameter returns EXTRA_VALUE error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "{{asid}}"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "{{role_id}}"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "{{user_id}}"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2020-02-11&family=le*&_exact-match=false&_fuzzy-match=true&invalidHeader=true&anotherInvalidHeader=false",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50"
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2020-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														},
														{
															"key": "_exact-match",
															"value": "false"
														},
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "invalidHeader",
															"value": "true"
														},
														{
															"key": "anotherInvalidHeader",
															"value": "false"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 15:37:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "615"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invariant\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"EXTRA_VALUE\",\n                        \"display\": \"Extra value - Additional properties are not allowed ('invalidHeader', 'anotherInvalidHeader' were unexpected)\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search query resulting in > max-results - TOO_MANY_MATCHES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2071513-dff4-49e4-8b73-6d6d8d7aafac",
												"exec": [
													"var response = pm.response.json();",
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(200);",
													"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
													"error.assertDisplayIs(\"Too Many Matches\");",
													"error.assertSeverityIs(\"information\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_max-results=40&gender=male&birthdate=ge2020-01-11&family=le*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_max-results",
													"value": "40"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2020-01-11"
												},
												{
													"key": "family",
													"value": "le*"
												}
											]
										},
										"description": "Search query which matches more patients then the max-results value returns a *TOO_MANY_MATCHES* error"
									},
									"response": []
								},
								{
									"name": "Fuzzy Search 1 character family name - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b30eb83-dd47-4467-960f-befeabd2b226",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "51151682-6a3d-4ad8-b831-282e2e13f8ab",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"var response = pm.response.json();",
													"",
													"assertThat.statusCodeIs(400);",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDiagnosticsIs(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertDisplayIs('Search data is invalid');",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "200000000610"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "1234567890"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "1234567890"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "S*"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "Fuzzy"
												}
											]
										},
										"description": "Attempt a _fuzzy_match_ using a family name of 1 character returns _FUZZY_CRITERIA_NOT_MET error"
									},
									"response": [
										{
											"name": "Fuzzy Search invalid search criteria",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "S*"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 09:05:44 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "599"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invalid\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"NO_SEARCHES_PERFORMED\",\n                        \"display\": \"No searches were performed as the search criteria did not meet the minimum requirements\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										},
										{
											"name": "FUZZY_CRITERIA_NOT_MET error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=true&family=S*&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "true"
														},
														{
															"key": "family",
															"value": "S*"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 15:59:27 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "605"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"invalid\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"FUZZY_CRITERIA_NOT_MET\",\n                        \"display\": \"A fuzzy search was requested however the data given did not meet the fuzzy search criteria\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": \"1\"\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Fuzzy Search wildcarded family - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "87a57c45-62b5-464c-a965-97e763e49271",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "19a43797-a427-471e-91d0-e619f777986d",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(400)",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDiagnosticsIs(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertDisplayIs('Search data is invalid');",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=Ja\\*&birthdate=2000-01-01&given=David&gender=male",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "Ja\\*"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												}
											]
										},
										"description": "Validates wildcards are not allowed when performing a fuzzy-search"
									},
									"response": []
								},
								{
									"name": "Fuzzy Search Invalid value in fuzzy_match parameter - INVALID_VALUE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "765c3bec-486b-49b0-aa51-eed4e8dd8783",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c5835699-640c-4366-81f3-9cde0a5b6e3b",
												"exec": [
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"var response = pm.response.json();",
													"",
													"assertThat.statusCodeIs(400);",
													"",
													"error.assertCodeIs(\"INVALID_VALUE\");",
													"error.assertDiagnosticsIs(\"Invalid value - 'test' in field '_fuzzy-match'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");",
													"error.assertDisplayIs('Provided value is invalid')"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "test"
												},
												{
													"key": "family",
													"value": "Stephen"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "Fuzzy"
												}
											]
										},
										"description": "Setting the _fuzzy-match_ value to `test` returns a *INVALID_VALUE* error message "
									},
									"response": [
										{
											"name": "fuzzy-match INVALID_VALUE response",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?_fuzzy-match=test&family=Stephen&birthdate=2015-12-15&given=Fuzzy",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_fuzzy-match",
															"value": "test"
														},
														{
															"key": "family",
															"value": "Stephen"
														},
														{
															"key": "birthdate",
															"value": "2015-12-15"
														},
														{
															"key": "given",
															"value": "Fuzzy"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Thu, 27 Feb 2020 09:10:09 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "548"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"value\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"INVALID_VALUE\",\n                        \"display\": \"Invalid value - 'test' in field '_fuzzy-match'\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"error\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search Invalid Leading Wildcards - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f6b4d003-ef37-4803-a7f1-3a8fc23466e7",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"Invalid leading wildcards on given name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'name.given'\",",
													"      display: \"Search data is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=S\\*'},",
													"      ",
													"    { name: \"Invalid leading wildcards on given name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'name.given'\",",
													"      display: \"Search data is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=\\*earch'},",
													"",
													"    { name: \"Invalid leading wildcards on family name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'name.family'\",",
													"      display: \"Search data is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=\\*apping&gender=female&birthdate=2010-01-01&given=Search'},",
													"      ",
													"    { name: \"Invalid leading wildcards on family name\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'name.family'\",",
													"      display: \"Search data is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=M\\*&gender=female&birthdate=2010-01-01&given=Search'},",
													"",
													"    { name: \"Invalid leading wildcards on address-postcode\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'address.postalCode'\",",
													"      display: \"Search data is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=Search&address-postcode=L\\*'},",
													"",
													"    { name: \"Invalid leading wildcards on address-postcode\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'address.postalCode'\",",
													"      display: \"Search data is invalid\",",
													"      severity: \"error\",",
													"      query: '/Patient?family=Mapping&gender=female&birthdate=2010-01-01&given=Search&address-postcode=\\*2AA'},",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38052ff8-d19a-4ed6-a3c5-23b52a2eedac",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            // pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].diagnostics).to.eql(scenario.diagnostics, 'invalid diagnostics');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=Smith&gender=female&birthdate=2010-01-01&given=\\*ane",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "Smith"
												},
												{
													"key": "gender",
													"value": "female"
												},
												{
													"key": "birthdate",
													"value": "2010-01-01"
												},
												{
													"key": "given",
													"value": "\\*ane"
												}
											]
										},
										"description": "Invalid leading wildcards on given name, family name and postcode results in an error response"
									},
									"response": []
								},
								{
									"name": "Fuzzy search invalid combinations - INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "81b63f06-b46c-4962-a868-9ac6f16bb1c8",
												"exec": [
													"pm.variables.set('params', params = [",
													"   ",
													"    // Requests missing mandatory parameters required for a fuzzy search",
													"    { parameter: \"DOB & Family\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=le', expected: 400 },",
													"    { parameter: \"DOB, Family & PostCode\", query: '/Patient?_fuzzy-match=true&birthdate=2020-02-11&family=leng*&address-postcode=DN16*', expected: 400 },",
													"    { parameter: \"Gender, DOB & Given\", query: '/Patient?_fuzzy-match=true&gender=male&birthdate=2020-02-11&&given=Selena', expected: 400 },",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f9b5cf91-71dd-4655-8e59-a07af5f27a36",
												"exec": [
													"var response = pm.response.json();",
													"",
													"let asidHeader = pm.environment.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"let params = pm.variables.get('params');",
													"",
													"",
													"params.forEach(p => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + p.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, res) {",
													"        console.log(\"Response for \" + p.parameter, res.json());",
													"",
													"        pm.test(\"Returns Status code \" + p.expected + \" for parameters \" + p.parameter, function () {",
													"            pm.expect(res.code).to.equal(p.expected);",
													"        });",
													"",
													"        if (p.expected === 400) {",
													"            pm.test(\"Returns INVALID_COMBINATION when using parameters \" + p.parameter, () => {",
													"                pm.expect(res.json().issue[0].details.coding[0].code).to.equal('INVALID_SEARCH_DATA', 'invalid code');",
													"                pm.expect(res.json().issue[0].diagnostics).to.equal(\"Invalid search data provided - 'A fuzzy search was requested however the data given did not meet the fuzzy search criteria'\");",
													"                pm.expect(res.json().issue[0].details.coding[0].display).to.equal(\"Search data is invalid\");",
													"                pm.expect(res.json().issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode', 'invalid system link');",
													"                pm.expect(res.json().issue[0].severity).to.equal('error', 'invalid severity');",
													"            });",
													"        }",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&birthdate=2015-12-15&given=FuzzyYYYYYY",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "birthdate",
													"value": "2015-12-15"
												},
												{
													"key": "given",
													"value": "FuzzyYYYYYY"
												}
											]
										},
										"description": "Validates search parameter combinations for a fuzzy search\n\n- Invalid combinations return a 400 response\n-- DOB & Family\n-- DOB, Family & PostCode\n-- Gender, DOB & Given"
									},
									"response": []
								},
								{
									"name": "Search missing mandatory fields - INVALID_SEARCH_DATA / MISSING_VALUE",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e98b1640-4b2b-4178-9c15-5508205894fa",
												"exec": [
													"pm.variables.set('testData', data = [",
													"    { name: \"missing mandatory fields - Birth\", ",
													"      code: \"MISSING_VALUE\",",
													"      diagnostics: \"Missing value - 'birth_date/birth_date_range_start/birth_date_range_end'\",",
													"      severity: \"error\",",
													"      display: \"Search data is invalid\",",
													"      query: '/Patient?family=Mapping&gender=female'},",
													"",
													"    { name: \"missing mandatory fields - Family\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      display: \"Search data is invalid\",",
													"      query: '/Patient?gender=female&birthdate=2010-01-01'},",
													"      ",
													"    { name: \"missing mandatory fields - Gender\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      diagnostics: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      display: \"Search data is invalid\",",
													"      query: '/Patient?family=Mapping&birthdate=2010-01-01'},",
													"      ",
													"    { name: \"missing mandatory fields - Family & Gender\", ",
													"      code: \"INVALID_SEARCH_DATA\",",
													"      display: \"Search data is invalid\",",
													"      diagnostics: \"Invalid search data provided - 'No searches were performed as the search criteria did not meet the minimum requirements'\",",
													"      severity: \"error\",",
													"      query: '/Patient?birthdate=2010-01-01'}",
													"]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6631fa33-b05f-4fbf-9cd8-024057be71fc",
												"exec": [
													"let asidHeader = pm.variables.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"pm.variables.get('testData').forEach(scenario => {",
													"    pm.sendRequest({",
													"        url: pm.environment.get(\"environment\") + scenario.query,",
													"        method: 'GET',",
													"        header: {",
													"            asidHeader,",
													"            sessionURIDHeader,",
													"            identityUUIDHeader,",
													"            authorization",
													"        }",
													"    }, function (err, response) {",
													"        pm.test(scenario.name + \": Returns Status code 400 \", () => {",
													"            pm.expect(response.code).to.equal(400);",
													"        });        ",
													"",
													"            pm.test(scenario.name + \": Returns correct FHIR error response\", () => {",
													"            pm.expect(response.json().issue[0].details.coding[0].code).to.eql(scenario.code, 'invalid code');",
													"            // pm.expect(response.json().issue[0].details.coding[0].display).to.eql(scenario.display, 'invalid display');",
													"            pm.expect(response.json().issue[0].diagnostics).to.eql(scenario.diagnostics, 'invalid diagnostics');",
													"            pm.expect(response.json().issue[0].severity).to.eql(scenario.severity, 'invalid severity');",
													"            pm.expect(response.json().issue[0].details.coding[0].system).to.eql(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\", 'invalid system url');",
													"        });",
													"    });",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?family=Smith&birthdate=2010-01-01",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "family",
													"value": "Smith"
												},
												{
													"key": "gender",
													"value": "female",
													"disabled": true
												},
												{
													"key": "birthdate",
													"value": "2010-01-01"
												}
											]
										},
										"description": "missing mandatory fields on simple search will result in a 400 error response:\n\n- missing DOB\n- missing Family\n- missing Gender"
									},
									"response": []
								},
								{
									"name": "Search query resulting in >50 patients - TOO_MANY_MATCHES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee39d4e5-8d73-4a31-9413-ebca424707b1",
												"exec": [
													"eval(pm.globals.get(\"assertThatUtil\"));",
													"eval(pm.globals.get(\"patient\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThatUtil().statusCodeIs(200);",
													"error.assertCodeIs(\"TOO_MANY_MATCHES\");",
													"error.assertDisplayIs(\"Too Many Matches\");",
													"error.assertSeverityIs(\"information\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_max-results=50&gender=male&birthdate=ge2019-02-11&family=le*",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_max-results",
													"value": "50"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2019-02-11"
												},
												{
													"key": "family",
													"value": "le*"
												}
											]
										},
										"description": "Search query which results in over 50 patients being matched, returns a *TOO_MANY_MATCHES* error"
									},
									"response": [
										{
											"name": "TOO_MANY_MATCHES error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50",
															"disabled": true
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2019-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Wed, 26 Feb 2020 15:52:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Etag",
													"value": "\"517a1f4fce14f23ea2ef203e8382f9abb2654985\""
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"multiple-matches\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"TOO_MANY_MATCHES\",\n                        \"display\": \"Too Many Matches\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"information\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Search query No Match - NO_MATCH",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3134308b-ea75-402c-86a1-dcf43ff1fc93",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=Smith",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "birthdate",
													"value": "ge2019-02-11"
												},
												{
													"key": "family",
													"value": "Smith"
												}
											]
										},
										"description": "Search query which results in over 50 patients being matched, returns a *TOO_MANY_MATCHES* error"
									},
									"response": [
										{
											"name": "TOO_MANY_MATCHES error message",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "{{nhsd-asid-header}}",
														"type": "text",
														"value": "200000000610"
													},
													{
														"key": "{{nhsd-session-urid-header}}",
														"type": "text",
														"value": "1234567890"
													},
													{
														"key": "{{nhsd-identity-uuid-header}}",
														"type": "text",
														"value": "1234567890"
													}
												],
												"url": {
													"raw": "{{environment}}/Patient?gender=male&birthdate=ge2019-02-11&family=le*",
													"host": [
														"{{environment}}"
													],
													"path": [
														"Patient"
													],
													"query": [
														{
															"key": "_max-results",
															"value": "50",
															"disabled": true
														},
														{
															"key": "gender",
															"value": "male"
														},
														{
															"key": "birthdate",
															"value": "ge2019-02-11"
														},
														{
															"key": "family",
															"value": "le*"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Server",
													"value": "nginx"
												},
												{
													"key": "Date",
													"value": "Wed, 26 Feb 2020 15:52:24 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json"
												},
												{
													"key": "Content-Length",
													"value": "538"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Etag",
													"value": "\"517a1f4fce14f23ea2ef203e8382f9abb2654985\""
												}
											],
											"cookie": [],
											"body": "{\n    \"issue\": [\n        {\n            \"code\": \"multiple-matches\",\n            \"details\": {\n                \"coding\": [\n                    {\n                        \"code\": \"TOO_MANY_MATCHES\",\n                        \"display\": \"Too Many Matches\",\n                        \"system\": \"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\",\n                        \"version\": 1\n                    }\n                ]\n            },\n            \"severity\": \"information\"\n        }\n    ],\n    \"resourceType\": \"OperationOutcome\"\n}"
										}
									]
								},
								{
									"name": "Performing a fuzzy search in combination with a histroic search returns INVALID_SEARCH_DATA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0adaa3fb-0b67-4753-9a2c-ca55adee3829",
												"exec": [
													"let asidHeader = pm.environment.get(\"asidHeader\");",
													"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
													"let authorization = pm.environment.get(\"authorizationHeader\");",
													"",
													"// Send request with _fuzzy-match=false to make sure no patients are returned",
													"pm.sendRequest({",
													"    url: pm.environment.get(\"environment\") + '/Patient?_fuzzy-match=false&family=James&birthdate=2000-01-01&given=David&gender=male',",
													"    method: 'GET',",
													"    header: {",
													"        asidHeader,",
													"        sessionURIDHeader,",
													"        identityUUIDHeader,",
													"        authorization",
													"    }",
													"}, function (err, res) {",
													"    pm.test('@Before: fuzzy-match set to false returns 0 patients', () => {",
													"        console.log('@Before Request: ' + JSON.stringify(res.json()));",
													"        pm.expect(res.json().total).to.equal(0);",
													"    });",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dd7e7156-e569-4918-b223-5dfab99fde12",
												"exec": [
													"var response = pm.response.json();",
													"const assertThat = eval(pm.globals.get(\"assertThatUtil\"));",
													"const error = eval(pm.globals.get(\"errorMessage\"));",
													"",
													"assertThat.statusCodeIs(400);",
													"error.assertCodeIs(\"INVALID_SEARCH_DATA\");",
													"error.assertDiagnosticsIs(\"Invalid search data provided - 'Performing a historic search and a fuzzy search at the same time is incompatible'\");",
													"error.assertSeverityIs(\"error\");",
													"error.assertDisplayIs(\"Search data is invalid\");",
													"error.assertSystemIs(\"https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient?_fuzzy-match=true&family=James&birthdate=2000-01-01&given=David&gender=male&_history=true",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient"
											],
											"query": [
												{
													"key": "_fuzzy-match",
													"value": "true"
												},
												{
													"key": "family",
													"value": "James"
												},
												{
													"key": "birthdate",
													"value": "2000-01-01"
												},
												{
													"key": "given",
													"value": "David"
												},
												{
													"key": "gender",
													"value": "male"
												},
												{
													"key": "_history",
													"value": "true"
												}
											]
										},
										"description": "Performing a fuzzy-search in conjunction with a historic search returns a 400 BAD REQUEST with the error INVALID_SEARCH_DATA"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Retrieve",
					"item": [
						{
							"name": "Error Responses",
							"item": [
								{
									"name": "Retrieve Patient - Error Responses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28c4756e-398c-4514-be24-865853a9355b",
												"exec": [
													"/*assign local scenario variable from \"scenario\" variable set in prerequisite script and also assign header variables from variables*/\r",
													"\r",
													"let scenario = pm.variables.get('scenario');\r",
													"let asidHeader = pm.variables.get(\"asidHeader\");\r",
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
													"let authorization = pm.environment.get(\"authorizationHeader\");\r",
													"\r",
													"/*for each scenario dataSet loop the Retrieve Patient service and ensure the correct Error Reponse is returned for each scenario*/   \r",
													"\r",
													"  scenario.forEach(s => {\r",
													"    console.log(\"scenario under test is: \" + s.desc);\r",
													"\r",
													"   pm.sendRequest({\r",
													"        url: pm.environment.get(\"environment\") + \"/Patient/\" + s.nhs_id,\r",
													"        method: 'GET',\r",
													"        header: { asidHeader, sessionURIDHeader, identityUUIDHeader, authorization }\r",
													"        \r",
													"    }, function (err, res) {\r",
													"        let response = res.json();\r",
													"        pm.test('The correct error response has been returned for: ' + s.desc, () => {\r",
													"            pm.expect(res.code).to.equal(s.responseStatus);\r",
													"            pm.expect(response.issue[0].details.coding[0].display).to.equal(s.responseDisplay);\r",
													"            pm.expect(response.issue[0].details.coding[0].code).to.equal(s.responseCode);\r",
													"            pm.expect(response.issue[0].severity).to.equal(s.responseSeverity);\r",
													"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
													"            \r",
													"        })\r",
													"    })\r",
													"\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1595368c-ce5a-40dd-94dc-2c1e3a9acd92",
												"exec": [
													"/*Create dataSets for testing 'Retrieve Patient' Error Exceptions scenarios and assign the \"scenario\" array to a variable to be used in Test*/ \r",
													"  \r",
													"   let scenario = [\r",
													"       {desc: \"INVALIDATED_RESOURCE - invalidated NHS number (sensetive patient)\",  \r",
													"        nhs_id: \"5900006107\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALIDATED_RESOURCE\", \r",
													"        responseDisplay: \"Resource that has been marked as invalid was requested - invalid resources cannot be retrieved\"},\r",
													"        \r",
													"       {desc: \"INVALID_NHS_NUMBER - invalid check digit\",  \r",
													"        nhs_id: \"9000000000\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALID_RESOURCE_ID\", \r",
													"        responseDisplay: \"Resource Id is invalid\"},\r",
													"        \r",
													"       {desc: \"INVALID_NHS_NUMBER - too short\", \r",
													"        nhs_id: \"900000000\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"value\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALID_RESOURCE_ID\", \r",
													"        responseDisplay: \"Resource Id is invalid\"},\r",
													"        \r",
													"      {desc: \"PATIENT_NOT_FOUND - NHS Number Does Not Exist\", \r",
													"        nhs_id: \"9111231130\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"not-found\", \r",
													"        responseSeverity: \"information\", \r",
													"        responseCode: \"RESOURCE_NOT_FOUND\", \r",
													"        responseDisplay: \"Resource not found\"},\r",
													"        \r",
													"        {desc: \"INVALID_NHS_NUMBER - not passed in\", \r",
													"        nhs_id: \"\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"UNSUPPORTED_SERVICE\", \r",
													"        responseDisplay: \"Unsupported Service\"},\r",
													"        \r",
													"       {desc: \"RETRIEVAL_UNSUPPORTED\", \r",
													"        nhs_id: \"9111231130/nationality\", \r",
													"        responseStatus: 400, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"UNSUPPORTED_SERVICE\", \r",
													"        responseDisplay: \"Unsupported Service\"},\r",
													"        \r",
													"       {desc: \"INVALIDATED_NHS_NUMBER\", nhs_id: \"5900006107\", \r",
													"        responseStatus: 404, \r",
													"        responseIssueCode: \"processing\", \r",
													"        responseSeverity: \"error\", \r",
													"        responseCode: \"INVALIDATED_RESOURCE\", \r",
													"        responseDisplay: \"Resource that has been marked as invalid was requested - invalid resources cannot be retrieved\"} \r",
													"       ]\r",
													"       \r",
													"    pm.variables.set('scenario', scenario); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient/:nhs_id",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient",
												":nhs_id"
											],
											"variable": [
												{
													"key": "nhs_id",
													"value": "{{nshID}}"
												}
											]
										},
										"description": "Invalid Retrieve Patient calls shall result in a valid Error Response"
									},
									"response": []
								},
								{
									"name": "Security validation is performed before request validation when performing a Retrieve",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23d8036d-a198-4479-bfa9-7ebe55f4e854",
												"exec": [
													"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");",
													"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");",
													"",
													"",
													"pm.variables.get('testData').forEach(scenario => {\t\t",
													"\tlet asidTokenHeader = pm.environment.get('skipTest') ? getToken(scenario.asid) : getAsidHeader(scenario.asid) ",
													"",
													"\tpm.sendRequest({",
													"\t\turl: pm.environment.get(\"environment\") + '/Patient/' + scenario.nhsNumber,",
													"\t\tmethod: 'GET',",
													"\t\theader: {",
													"\t\t\tasidTokenHeader,",
													"\t\t\tsessionURIDHeader,",
													"\t\t\tidentityUUIDHeader,\t\t\t",
													"\t\t}",
													"\t}, function (err, res) {",
													"\t\tpm.test(scenario.name + \" Returns Status code \" + scenario.expectedStatus, function () {",
													"\t\t\tpm.expect(res.code).to.equal(scenario.expectedStatus, 'invalid response returned');",
													"\t\t});",
													"",
													"\t\tif (scenario.expectedStatus == 400) {",
													"\t\t\tpm.test(scenario.name + \" Returns error code INVALID_RESOURCE_ID\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('INVALID_RESOURCE_ID');",
													"\t\t\t});",
													"",
													"\t\t} else {",
													"\t\t\tpm.test(scenario.name + \" Returns error code ACCESS_DENIED\", () => {",
													"\t\t\t\tpm.expect(res.json().issue[0].details.coding[0].code).to.equal('ACCESS_DENIED');",
													"\t\t\t});",
													"\t\t}",
													"\t});",
													"",
													"});",
													"",
													"",
													"function getToken(type) {",
													"\tlet token;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\ttoken = pm.globals.get(\"token\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\ttoken = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\ttoken = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: 'Authorization',",
													"\t\tvalue: 'Bearer ' + token",
													"\t}",
													"}",
													"",
													"function getAsidHeader(type) {",
													"\tlet asid;",
													"\tswitch (type) {",
													"\t\tcase 'valid':",
													"\t\t\tasid = pm.environment.get(\"from_asid\");",
													"\t\t\tbreak;",
													"\t\tcase 'invalid':",
													"\t\t\tasid = '123456789';",
													"\t\t\tbreak;",
													"\t\tcase 'missing':",
													"\t\t\tasid = '';",
													"\t\t\tbreak;",
													"\t}",
													"\t",
													"\treturn {",
													"\t\tkey: pm.globals.get(\"nhsd-asid-header\"),",
													"\t\tvalue: asid",
													"\t}",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "70bc36e2-b33a-4548-ae86-239bb4ca3ab7",
												"exec": [
													"pm.variables.set('testData', data = [",
													"\t{ name: \"Valid asid/token and Invalid NHS Number\", asid: 'valid', nhsNumber: '1234', expectedStatus: 400},",
													"\t{ name: \"Invalid asid/token and Invalid NHS Number\", asid: 'invalid', nhsNumber: '1234', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Invalid NHS Number\", asid: 'missing', nhsNumber: '1234', expectedStatus: 401},",
													"\t{ name: \"No asid/token and Valid NHS Number\", asid: 'missing', nhsNumber: '5900014061', expectedStatus: 401}",
													"]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "{{nhsd-asid-header}}",
												"type": "text",
												"value": "{{from_asid}}"
											},
											{
												"key": "{{nhsd-session-urid-header}}",
												"type": "text",
												"value": "{{role_id}}"
											},
											{
												"key": "{{nhsd-identity-uuid-header}}",
												"type": "text",
												"value": "{{user_id}}"
											}
										],
										"url": {
											"raw": "{{environment}}/Patient/1234",
											"host": [
												"{{environment}}"
											],
											"path": [
												"Patient",
												"1234"
											]
										},
										"description": "Security checks should be performed first to prevent information leakage.\n\nValidates when sending a request which has both an invalid asid and nhs number, validation is performed on the asid first, thus throwing a 401 Unauthorized instead of a\nnhs number validation error (400 Bad Request)"
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieve Patient - Happy path 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bc70238-1f2a-4d33-b6bc-5ad0ad8ea0e5",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "30f21a00-640f-441f-82f2-b03c0ba99626",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-05\");",
											"pm.variables.set(\"given\", [\"Search\", \"Again\"]);",
											"pm.variables.set(\"family\", \"Mapping\");",
											"pm.variables.set(\"prefix\", \"Dame\");",
											"pm.variables.set(\"suffix\", [\"MBA\", \"PHD\"]);",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2010-01-01\");",
											"pm.variables.set(\"deceasedDateTime\", \"2015-03-02\");",
											"pm.variables.set(\"addressLine\", JSON.stringify([\"1\", \"westwood\", \"ecclechill\", \"bradfordian\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-24\");",
											"pm.variables.set(\"telecomValue\", \"07900000000\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"2020-02-27\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"dispensingDoctorPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"medicalApplianceSupplierPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", false);",
											"pm.variables.set(\"patientId\", \"5900009068\");",
											"pm.variables.set(\"expectedBirthOrder\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dame\" = PDS Fhir \"Dame\"\n* suffix\n* nameUse - specifically Spine nameType \"Usual name\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - specifically Spine addressType \"usual\" = PDS Fhir addresUse \"home\"\n* postCode\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2191bdce-46c2-48cd-a3da-6c0594913b60",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2a27022-0eb7-42bc-ada9-00db3e538a01",
										"exec": [
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"alias\");",
											"pm.variables.set(\"family\", \"Alias\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"1990-10-10\");",
											"pm.variables.set(\"prefix\", \"Dr\");",
											"pm.variables.set(\"addressType\", \"work\");",
											"pm.variables.set(\"telecomType\", \"fax\");",
											"pm.variables.set(\"telecomUse\", \"work\");",
											"pm.variables.set(\"given\", [\"John\"]);",
											"pm.variables.set(\"suffix\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-03-02\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"130 Greenhouse Lane\",\"Work Road\",\"Roundhay\",\"Leeds\",\"WEST YORKSHIRE\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2019-01-10\");",
											"pm.variables.set(\"addressPeriodEnd\", \"2020-11-10\");",
											"pm.variables.set(\"postalCode\", \"LS18 4AD\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"metaVersionId\", \"21\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"2342424234\");",
											"pm.variables.set(\"generalPractitionerValue\", \"B86055\");",
											"pm.variables.set(\"generalPractitionerPeriodStart\", \"2020-02-28\");",
											"pm.variables.set(\"generalPractitionerPeriodEnd\", \"2020-04-29\");",
											"pm.variables.set(\"nominatedPharmacy\", \"FH895\");",
											"pm.variables.set(\"nominatedPharmacyPeriodStart\", \"2020-03-12\");",
											"pm.variables.set(\"nominatedPharmacyPeriodEnd\", \"2020-04-12\");",
											"pm.variables.set(\"dispensingDoctor\", \"C81621\");",
											"pm.variables.set(\"dispensingDoctorPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"medicalApplianceSupplier\", \"FYR20\");",
											"pm.variables.set(\"medicalApplianceSupplierPeriodStart\", \"2020-03-06\");",
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"pm.variables.set(\"language\", \"en\");",
											"pm.variables.set(\"languageDisplay\", \"English\");",
											"pm.variables.set(\"interpreter\", false);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Dr\" = PDS Fhir \"Dr\"\n* suffix\n* nameUse - specifically Spine nameType \"alias\" = PDS Fhir nameUse \"nickname\"\n* namePeriodStart\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"fax\" = PDS Fhir telecomSystem \"fax\"\n* telecomUse - specifically Spine telecomUse \"work\" = PDS Fhir telecomUse \"work\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2708378b-41f7-4c3b-bda5-3f322396b206",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e912b32a-21b7-4657-b6ee-ac028945aad1",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL7 is plugged in*/",
											"",
											"",
											"pm.variables.set(\"nameType\", \"preferred\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"person\"]);",
											"pm.variables.set(\"family\", \"Unknown\");",
											"pm.variables.set(\"prefix\", \"Lady\");",
											"pm.variables.set(\"gender\", \"not known\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"13 westwood\",\"bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-01-02\");",
											"pm.variables.set(\"postalCode\", undefined);",
											"pm.variables.set(\"addressType\", \"correspondence\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"telecomType\", \"textphone\");",
											"pm.variables.set(\"telecomUse\", \"pager\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"language\", \"ab\");",
											"pm.variables.set(\"languageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"interpreter\", true);",
											"pm.variables.set(\"patientId\", \"5900007073\");",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lady\" = PDS Fhir \"Lady\"\n* suffix\n* nameUse - specifically Spine nameType \"preferred\" = PDS Fhir nameUse \"usual\"\n* namePeriodStart\n* gender - specifically Spine gender \"not known\" = PDS Fhir nameUse \"unknown\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"textphone\" = PDS Fhir telecomSystem \"pager\"\n* telecomUse - specifically Spine telecomUse \"pager\" = PDS Fhir telecomUse \"mobile\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69f3a4fb-4a79-4e96-9155-3e5efcd6d635",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "075805f5-9bfd-4e8c-8106-5319661f0c81",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"previous\");",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"given\", [\"someone\"]);",
											"pm.variables.set(\"family\", \"previous\");",
											"pm.variables.set(\"prefix\", \"Lord\");",
											"pm.variables.set(\"gender\", \"not specified\");",
											"pm.variables.set(\"birthdate\", \"2008-01-01\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"1 Temporary Ave\",\"Temporary Place\",\"Temporary Town\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-02\");",
											"pm.variables.set(\"postalCode\", \"BD2 7NT\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-26\");",
											"pm.variables.set(\"telecomValue\", \"a.nhs@nhs.com\");",
											"pm.variables.set(\"telecomType\", \"email\");",
											"pm.variables.set(\"telecomUse\", \"home\");",
											"pm.variables.set(\"patientId\", \"5900019241\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\n\n* resourseType\n* patientId\n* identifierExtention\n* metaVersionId\n* nameFamily\n* nameGiven\n* prefix - specifically Spine \"Lord\" = PDS Fhir \"Lord\"\n* suffix\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\n* namePeriodStart\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\n* birthDate\n* deceasedDateTime\n* addressLines\n* addressPeriodStart\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\n* postCode\n* telecomSystem - specifically Spine telecomType \"email\" = PDS Fhir telecomSystem \"email\"\n* telecomUse - specifically Spine telecomUse \"home\" = PDS Fhir telecomUse \"home\"\n* telecomPeriodStart\n* telecomValue\n* deceasedDateTime if - if present for Patient\n* generalPractitionerValue - if present for Patient\n* deathNotificationValueDateTime - if present for Patient\n* Nominated Pharmacy - if present for Patient\n* Medical Appliance Supplier - if present for Patient\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36a1d0d9-c39d-4377-8470-a95cb5b994c1",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "411d3d28-6151-43b0-b5c6-7547da5a7724",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"family\", \"temporary\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2004-03-01\");",
											"pm.variables.set(\"prefix\", \"Miss\");",
											"pm.variables.set(\"nameType\", \"birth\");",
											"pm.variables.set(\"addressType\", \"temporary\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"mobile\");",
											"pm.variables.set(\"given\", [\"ned\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"13 Westwood\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900008290\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"09000000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Miss\" = PDS Fhir \"Miss\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"female\" = PDS Fhir nameUse \"female\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"mobile\" = PDS Fhir telecomUse \"mobile\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f45fe3a5-8e30-4eaa-bf51-0bf292e01144",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8a7a9335-7187-47b1-b47b-865ccb56db9c",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Mr\");",
											"pm.variables.set(\"nameType\", \"bachelor\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"temporary\");",
											"pm.variables.set(\"family\", \"Mister\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2009-01-01\");",
											"pm.variables.set(\"given\", [\"Any\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"17 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900005798\");",
											"pm.variables.set(\"metaVersionId\", \"3\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"0900000000\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"male\" = PDS Fhir nameUse \"male\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"temporary\" = PDS Fhir telecomUse \"temp\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0aa8f37e-9ac7-4297-86a7-c499871a41ce",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9700eb19-1197-4b2d-84bc-2649c1e0cdb1",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Mrs\");",
											"pm.variables.set(\"nameType\", \"maiden\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"Answering Machine\");",
											"pm.variables.set(\"family\", \"Answermachine\");",
											"pm.variables.set(\"gender\", \"not known\");",
											"pm.variables.set(\"birthdate\", \"2007-01-01\");",
											"pm.variables.set(\"given\", [\"another\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"27 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2NJ\");",
											"pm.variables.set(\"patientId\", \"5900000605\");",
											"pm.variables.set(\"metaVersionId\", \"5\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"09234567\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "work in progress.  This test shall cover a Happy path Retrieve scenario.  It currently asserts on General Practitioner, Pharmicies, Communication & Patient identifier, language.  Other checks shall be added in due course."
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 8",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b633efbf-7304-479f-8c4a-3a5b7e45e899",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be977453-c6ae-4713-905b-8252de36e58e",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"prefix\", \"Ms\");",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"telecomType\", \"telephone\");",
											"pm.variables.set(\"telecomUse\", \"Emergency\");",
											"pm.variables.set(\"family\", \"Emergency\");",
											"pm.variables.set(\"gender\", \"not specified\");",
											"pm.variables.set(\"birthdate\", \"2004-01-01\");",
											"pm.variables.set(\"given\", [\"Emma\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"91 Westwood Avenue\",\"Eccleshill\",\"Bradford\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LY\");",
											"pm.variables.set(\"patientId\", \"5900013863\");",
											"pm.variables.set(\"metaVersionId\", \"2\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"telecomPeriodStart\", \"2020-02-27\");",
											"pm.variables.set(\"telecomValue\", \"0900000001\");",
											"pm.variables.set(\"deceasedDateTime\", \"\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* resourseType\r\n* patientId\r\n* identifierExtention\r\n* metaVersionId\r\n* nameFamily\r\n* nameGiven\r\n* prefix - specifically Spine \"Mr\" = PDS Fhir \"Mr\"\r\n* suffix\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* deceasedDateTime\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* telecomSystem - specifically Spine telecomType \"telephone\" = PDS Fhir telecomSystem \"phone\"\r\n* telecomUse - specifically Spine telecomUse \"Emergency\" = PDS Fhir telecomUse \"home\"\r\n* telecomPeriodStart\r\n* telecomValue\r\n* deceasedDateTime if - if present for Patient\r\n* generalPractitionerValue - if present for Patient\r\n* deathNotificationValueDateTime - if present for Patient\r\n* Nominated Pharmacy - if present for Patient\r\n* Medical Appliance Supplier - if present for Patient\r\n* Communication Language - if present for Patient"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Happy path 9 - Superceded",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "389af892-f680-4373-8b4b-91a88baa2561",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f869726-ce7b-42ca-afc6-8d70718f93fa",
										"exec": [
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"",
											"pm.variables.set(\"supercededPatientId\", \"5900006360\");",
											"",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"Retained\");",
											"pm.variables.set(\"gender\", \"male\");",
											"pm.variables.set(\"birthdate\", \"2006-04-01\");",
											"pm.variables.set(\"given\", [\"Jon\"]);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"addressLine\",JSON.stringify([\"15 Retained Road\",\"Retained\"]));",
											"pm.variables.set(\"addressPeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"postalCode\", \"BD2 2LK\");",
											"pm.variables.set(\"patientId\", \"5900011143\");",
											"pm.variables.set(\"resourceType\", \"Patient\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "5900006360"
										}
									]
								},
								"description": "This test validates that all Patient Demographic data is mapped correctly to the Fhir PDF response, specifically:\r\n\r\n* If the Patient record is marked as Superceded, the response shall return the Retained record for the Patient\r\n* nameUse - specifically Spine nameType \"usual name\" = PDS Fhir nameUse \"official\"\r\n* namePeriodStart\r\n* nameFamily\r\n* nameGiven\r\n* gender - specifically Spine gender \"not specified\" = PDS Fhir nameUse \"other\"\r\n* birthDate\r\n* addressLines\r\n* addressPeriodStart\r\n* addressUse - always returns \"home\" address only even though there may be other address associated with the Patient\r\n* postCode\r\n* resourseType\r\n* patientId\r\n* identifierExtention"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Sensitive",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "be7c8d06-b84e-405b-8175-fea186be9af4",
										"exec": [
											"var response = pm.response.json();",
											"eval(pm.globals.get(\"checkRetrieveMappings\"))();",
											"pm.variables.set(\"s-flagged\", false);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d133b906-ff6b-4b4d-861f-60019e37f433",
										"exec": [
											"pm.variables.set(\"s-flagged\", true);",
											"",
											"/*set variables for checking mapping*/",
											"",
											"/*data variables being checked against.  These shall be replaced by the variables set when HL& is plugged in*/",
											"pm.variables.set(\"nameType\", \"Usual name\");",
											"pm.variables.set(\"addressType\", \"usual\");",
											"pm.variables.set(\"family\", \"sensitive\");",
											"pm.variables.set(\"gender\", \"female\");",
											"pm.variables.set(\"birthdate\", \"2001-02-01\");",
											"pm.variables.set(\"given\", undefined);",
											"pm.variables.set(\"namePeriodStart\", \"2020-04-03\");",
											"pm.variables.set(\"patientId\", \"5900004430\");",
											"pm.variables.set(\"resourceType\", \"Patient\");",
											"pm.variables.set(\"deceasedDateTime\", \"2009-03-01\");",
											"pm.variables.set(\"securityCode\", \"R\");",
											"pm.variables.set(\"deathNotificationValueDateTime\", \"\");",
											"pm.variables.set(\"deathNotificationStatus.display\", \"Informal - death notice received via an update from a local NHS Organisation such as GP or Trust\");",
											"pm.variables.set(\"language\", \"be\");",
											"pm.variables.set(\"languageDisplay\", \"Belarusian\");",
											"pm.variables.set(\"interpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "200000000610"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "1234567890"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "1234567890"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/5900004430",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										"5900004430"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Patient - Date of birth formatting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44d284cd-cd0d-4a93-86de-1cd8af22fece",
										"exec": [
											"let testScenarios = pm.variables.get(\"testData\");",
											"let asidHeader = pm.environment.get(\"asidHeader\");",
											"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
											"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
											"let authorization = pm.environment.get(\"authorizationHeader\");",
											"",
											"testScenarios.forEach(scenario => {",
											"    pm.sendRequest({",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + scenario.nhsNumber,",
											"        method: 'GET',",
											"        header: {",
											"            asidHeader,",
											"            sessionURIDHeader,",
											"            identityUUIDHeader,",
											"            authorization",
											"        }",
											"    }, function (err, res) {",
											"        console.log(\"Response\", res.json());",
											"",
											"        pm.test(scenario.dobFormat, () => {",
											"            pm.expect(res.code).to.equal(200, 'invalid status code');",
											"            pm.expect(res.json().id).to.equal(scenario.nhsNumber, 'wrong patient returned');",
											"            pm.expect(res.json().birthDate).to.equal(scenario.expectedDob, 'invalid birthDate');",
											"        });",
											"    });",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d10adfb2-2c32-45b0-b131-c1fa54a418e6",
										"exec": [
											"pm.variables.set(\"testData\", data = [",
											"    {",
											"        dobFormat: \"Date of birth in the format yyyy is returned in the format yyyy\",",
											"        nhsNumber: \"5900017605\",",
											"        expectedDob: \"2000\"",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth in the format yyyyMM is returned in the format yyyyMM\",",
											"        nhsNumber: \"5900010260\",",
											"        expectedDob: \"2000-01\"",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is an invalid date means birthDate element is not returned\",",
											"        nhsNumber: \"5900011631\",",
											"        expectedDob: undefined",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is in an invalid format means birthDate element is not returned\",",
											"        nhsNumber: \"5900010384\",",
											"        expectedDob: undefined",
											"    },",
											"    {",
											"        dobFormat: \"Date of birth which is empty means birthDate element is not returned\",",
											"        nhsNumber: \"5900015319\",",
											"        expectedDob: undefined",
											"    },",
											"]);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										""
									]
								},
								"description": "Handle patients dates of birth which are in different formats\n\n\n- NHS Number: 5900017605 with DOB as 2000 (yyyy) should display DOB as 2000  \n- NHS Number: 5900010260 with DOB as 2000/01 (yyyyMM), should display DOB as 2000/01  \n- NHS Number: 5900011631 with DOB as 31st Feb, should not display DOB at all  \n- NHS Number: 5900010384 with DOB as 2 (y), should not display DOB at all  \n- NHS Number: 5900015319 with Missing DOB, should not display DOB at all"
							},
							"response": []
						},
						{
							"name": "Retrieve Patient: Date of death formatting",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3c53d7f-bc1e-414b-8caf-638640a9ff1d",
										"exec": [
											"let testScenarios = pm.variables.get(\"testData\");",
											"let asidHeader = pm.environment.get(\"asidHeader\");",
											"let sessionURIDHeader = pm.environment.get(\"sessionURIDHeader\");",
											"let identityUUIDHeader = pm.environment.get(\"identityUUIDHeader\");",
											"let authorization = pm.environment.get(\"authorizationHeader\");",
											"",
											"testScenarios.forEach(scenario => {",
											"    pm.sendRequest({",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + scenario.nhsNumber,",
											"        method: 'GET',",
											"        header: {",
											"            asidHeader,",
											"            sessionURIDHeader,",
											"            identityUUIDHeader,",
											"            authorization",
											"            ",
											"        }",
											"    }, function (err, res) {",
											"        console.log(\"Response\", res.json());",
											"",
											"        pm.test(scenario.deathDate, () => {",
											"            pm.expect(res.code).to.equal(200, 'invalid http status code');",
											"            pm.expect(res.json().id).to.equal(scenario.nhsNumber, 'wrong patient returned');",
											"            pm.expect(res.json().deceasedDateTime).to.equal(scenario.expectedDeathDate, 'invalid deceasedDateTime');",
											"        });",
											"    });",
											"})",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8e439876-a535-47dc-8c26-bdf8084fae84",
										"exec": [
											"pm.variables.set(\"testData\", data = [",
											"    {",
											"        deathDate: \"Death date in the format yyyy means deceasedDateTime is returned in the format yyyy\",",
											"        nhsNumber: \"5900017605\",",
											"        expectedDeathDate: \"2020\"",
											"    },",
											"    {",
											"        deathDate: \"Death date in the format yyyyMM means deceasedDateTime is returned in the format yyyyMM\",",
											"        nhsNumber: \"5900010260\",",
											"        expectedDeathDate: \"2000-01\"",
											"    },",
											"    {",
											"        deathDate: \"Death date which is an invalid date means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900011631\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which is an invalid format means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900010384\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which is empty means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900015319\",",
											"        expectedDeathDate: undefined",
											"    },",
											"    {",
											"        deathDate: \"Death date which contains an invalid time means deceasedDateTime element is not returned\",",
											"        nhsNumber: \"5900008142\",",
											"        expectedDeathDate: undefined",
											"    }",
											"]);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/5900008142 ",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										"5900008142 "
									]
								},
								"description": "Handle patients death date which could be in a different format\n\n- NHS Number: 5900017605 with Death date as 2000 (yyyy) should display Death date as 2000  \n- NHS Number: 5900010260 with Death date as as 2000/01 (yyyyMM)  \n- NHS Number: 5900011631 with Death date as 31st Feb, should not display Death date at all  \n- NHS Number: 5900010384 with Death date as 2 (y), should not display Death date at all  \n- NHS Number: 5900015319 with Missing Death date, should not display Death date at all  \n- NHS Number: 5900008142 with Invalid time for death date, should not display Death date at all"
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Related Person",
					"item": [
						{
							"name": "Related Person 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4078f1ec-80b9-4c69-a531-8f48f17e0c42",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b4cb2c11-6ea6-4a15-ba70-a63bfedcae62",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900009068\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-09\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"surname\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"first\",\"second\"]);",
											"pm.variables.set(\"relatedPersonPrefix\", \"Dame\");",
											"pm.variables.set(\"relatedPersonSuffix\", [\"MBA\"]);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"brother\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersonRelationshipNOKCode\", \"N\");",
											"pm.variables.set(\"relatedPersonRelationshipNOKDisplay\", \"Next-of-Kin\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"home\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-09\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"09000000009\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"12\",\"weetwood\",\"somewhere\",\"somewhere town\",\"a county\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2LQ\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"email\");",
											"pm.variables.set(\"relatedPersonPreferredContactTime\", \"12:00\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Large print\");",
											"pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"yes\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"ab\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"relatedPersonInterpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"yes\"\n* Related Person PreferredContactMethod Extension - where it is set to \"email\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Large Print\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"yes\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to brother\n* Related Person RelationshipClass - when class has been set to Agent\n* Related Person Next of Kin - when next of kin has been set to \"yes\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a10cfa3-f76a-4b48-ae68-b946972f8f55",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e61d522-dd60-4e13-ac6c-d51689f2e35d",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900007820\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-09\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"anothername\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"firstname\"]);",
											"pm.variables.set(\"relatedPersonPrefix\", \"Dr\");",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"child\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Guardian\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"work\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"fax\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-09\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"12345678912\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"2 Westwood Ave\",\"Eccleshill\",\"Bradford\",\"County\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"letter\");",
											"pm.variables.set(\"relatedPersonPreferredContactTime\", \"14:00\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Braille\");",
											"pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"no\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"ab\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Abkhazian\");",
											"pm.variables.set(\"relatedPersonInterpreter\", false);",
											"",
											"pm.variables.set(\"relatedPersonRank1\", 1);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"letter\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Braille\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"no\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"child\"\n* Related Person RelationshipClass - when class has been set to \"Guardian of patient\"\n* Related Person Next of Kin - when next of kin has been set to \"no\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "838b157f-151b-47e9-b26d-278d99c4f9ba",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "21f93c96-778f-42d7-9cb3-628ad6155884",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900007073\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"anothername\");",
											"pm.variables.set(\"relatedPersonGiven\", [\"firstname\"]);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"partner\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Personal relationship\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"pager\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"textphone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"12345678912\");",
											"",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"13 Westwood Ave\",\"Eccleshill\",\"bradford\",\"County\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"minicom\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredWrittenCommsFormat\", \"Audio tape\");",
											"//pm.variables.set(\"relatedPersonCorrespondenceIndicator\", \"undefined\");",
											"",
											"pm.variables.set(\"relatedPersonLanguage\", \"Null\");",
											"pm.variables.set(\"relatedPersonLanguageDisplay\", \"Unknown\");",
											"pm.variables.set(\"relatedPersonInterpreter\", true);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Minicom (Textphone)\"\n* Related Person PreferredContactTimes Extension - when it has been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has been set to \"Audio tape\"\n* Related Person Language Extension - when a language has been set and intepreter required set to \"yes\"\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"domestic partner\"\n* Related Person RelationshipClass - when class has been set to \"Personal\"\n* Related Person Next of Kin - when next of kin has been set to \"no\"\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1c1311d-69a7-4722-8974-8a8188360674",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "41415723-6c62-426a-8a92-5a869b8ae61b",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900019241\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"relative\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"home\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"email\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"a.s@mail.com\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"not telephone contact\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"No Telephone contact\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"family member\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ca0748bd-04c6-4640-b9c3-8f8fd2b1a641",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8507a9fd-9773-4d7e-b5c0-a7a6dc6442ee",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900008290\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"father\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"answering machine\"); ",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"",
											"pm.variables.set(\"relatedPersonPostalCode\", \"BD2 2KM\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"sign language\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Sign Language\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"father\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 6",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e7f5879-a9fc-4754-b23f-a8cedf2a9555",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40611c4d-a4f3-4c1c-aba0-a6adfbd2fbe0",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900005798\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-15\");",
											"",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"mother\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"",
											"pm.variables.set(\"relatedPersontelecomUse\", \"emergency\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-15\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"telephone\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  when it is marked as \"no\"\n* Related Person PreferredContactMethod Extension - where it is set to \"Telephone\"\n* Related Person PreferredContactTimes Extension - when it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - when it has not been set\n* Related Person Language Extension - when a language has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"mother\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 7",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "031389a8-fe2c-4c27-adee-0402287f9a5e",
										"exec": [
											"var response = pm.response.json();",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f2f9675-7806-4fdc-9066-52bbe2813976",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900000605\");",
											"",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-04-16\");",
											"pm.variables.set(\"relatedPersonFamily\", \"test\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"next of kin\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"pm.variables.set(\"relatedPersontelecomUse\", \"mobile\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-04-16\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"23533452345325\");",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"telephone via proxy\");",
											"pm.variables.set(\"relatedPersonPatientID\", \"5900005798\");",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  where it has not been set\n* Related Person PreferredContactMethod Extension - where it has not been set\n* Related Person PreferredContactTimes Extension - where it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - where it has not been set\n* Related Person Language Extension - where it has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"Next-of-Kin\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom"
							},
							"response": []
						},
						{
							"name": "Related Person 8 multiple related persons",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e39d921-cb1c-418b-8961-6180b973673c",
										"exec": [
											"var response = pm.response.json(); ",
											"eval(pm.globals.get(\"patient\"));",
											"",
											"// Apply Common Mapping Tests",
											"//======================================",
											"eval(pm.globals.get(\"relatedPersonMappings\"))();",
											"",
											"",
											"//Checks performed on Subsequent Related people for the given Patient",
											"let rank = pm.variables.get('rank');",
											"rank.forEach(r => {",
											"    var relatedPerson = getRelatedPerson(r);",
											"        pm.test(\"Subsequent related person family name has been mapped correctly\", function () {",
											"            pm.expect(relatedPerson.resource.name[0].family).to.eql(r.relatedPersonFamily);",
											"        });",
											"        ",
											"        pm.test(\"Subsequent related person rank has been mapped correctly and in the correct order\", function () {",
											"        let entryInstance = (r.relatedPersonRank- 1)",
											"        if (!r.relatedPersonRank) {",
											"            pm.expect(relatedPerson.resource.extension).to.eql(undefined)",
											"            pm.expect(response.entry[16].resource.name[0].family).to.eql(r.relatedPersonFamily)",
											"        }",
											"        else {",
											"              pm.expect(response.entry[entryInstance].resource.extension[0].valuePositiveInt).to.eql(r.relatedPersonRank);",
											"        }",
											"        });",
											"        ",
											"        pm.test(\"Subsequent related person relationshipType has been mapped correctly\", function () {",
											"            ",
											"            if (r.relatedPersonRelationshipType == \"self\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ONESELF\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"self\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"foster parent\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"PRNFOST\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"foster parent\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"sister\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"SIS\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"sister\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"spouse\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"SPS\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"spouse\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"step parent\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"STPPRN\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"step parent\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"not known\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"U\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Unknown\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"guardian\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Guardian\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Guardian of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"polygamous partner\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"PolygamousPartner\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Polygamous Partner of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"dependant\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Dependant\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Dependant of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"nondependant\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"NonDependant\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Non Dependant of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy contact\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyContact\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Contact for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy communication\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyCommunication\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Communication for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"proxy contact communication\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"ProxyContactCommunication\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Proxy Contact and Communication for patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"carer\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"Carer\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Carer of patient\");",
											"            }",
											"            else if (r.relatedPersonRelationshipType == \"not specified\") {",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].code).to.eql(\"NotSpecified\");",
											"                pm.expect(relatedPerson.resource.relationship[0].coding[0].display).to.eql(\"Not Specified\");",
											"            }",
											"            else pm.expect.fail(\"relationshipType not been mapped correctly\");",
											"        });",
											"});",
											"",
											"//Ensure that the total number of related persons returned is 17",
											"pm.test(\"Returned number of Related Persons is 17\", () =>{",
											"    pm.expect(patient().getTotalNumberOfPatients()).to.eql(17);",
											"});",
											"",
											"response.entry[16].resource.name[0].family",
											"//getRelatdPerson function",
											"function getRelatedPerson(r) {",
											"    for (let person of response.entry) {",
											"        try {",
											"\t\t\tif (person.resource.name[0].family == r.relatedPersonFamily) {",
											"\t\t\t    console.log(person);",
											"\t\t\t\treturn person;",
											"\t\t\t}",
											"            } catch(err) {",
											"                }",
											"        }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6877e10d-b74c-45c3-ad7e-5cf01c64952d",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900013863\");",
											"",
											"//Related Person 1",
											"pm.variables.set(\"relatedPersonPeriodStart\", \"2020-05-07\");",
											"pm.variables.set(\"relatedPersonAddressLine\", JSON.stringify([\"Rank1\",\"Rank1\"]));",
											"pm.variables.set(\"relatedPersonPostalCode\", \"RANK1\");",
											"pm.variables.set(\"relatedPersonFamily\", \"Rank1\");",
											"pm.variables.set(\"relatedPersonGiven\", undefined);",
											"pm.variables.set(\"relatedPersonRelationshipType\", \"parent\");",
											"pm.variables.set(\"relatedPersonRelationshipClass\", \"Agent\");",
											"pm.variables.set(\"relatedPersontelecomUse\", \"temporary\");",
											"pm.variables.set(\"relatedPersontelecomType\", \"telephone\");",
											"pm.variables.set(\"relatedPersontelecomPeriodStart\", \"2020-05-07\");",
											"pm.variables.set(\"relatedPersontelecomValue\", \"\");",
											"pm.variables.set(\"relatedPersonPreferredContactMethod\", \"visit\");",
											"pm.variables.set(\"relatedPersonRank1\", 1);",
											"",
											"",
											"//Subsequent Related people for this patient",
											"let rank = [",
											"    {relatedPersonRank: 2,",
											"     relatedPersonRelationshipType: \"self\",",
											"     relatedPersonFamily: \"Rank2\"},",
											"     ",
											"    {relatedPersonRank: 3,",
											"     relatedPersonRelationshipType: \"foster parent\",",
											"     relatedPersonFamily: \"Rank3\"},",
											"     ",
											"    {relatedPersonRank: 4,",
											"     relatedPersonRelationshipType: \"sister\",",
											"     relatedPersonFamily: \"Rank4\"},",
											"     ",
											"    {relatedPersonRank: 5,",
											"     relatedPersonRelationshipType: \"spouse\",",
											"     relatedPersonFamily: \"Rank5\"},  ",
											"",
											"    {relatedPersonRank: 6,",
											"     relatedPersonRelationshipType: \"step parent\",",
											"     relatedPersonFamily: \"Rank6\"},  ",
											"     ",
											"    {relatedPersonRank: 7,",
											"     relatedPersonRelationshipType: \"not known\",",
											"     relatedPersonFamily: \"Rank7\"},  ",
											"    ",
											"    {relatedPersonRank: 8,",
											"     relatedPersonRelationshipType: \"guardian\",",
											"     relatedPersonFamily: \"Rank8\"},",
											"     ",
											"    {relatedPersonRank: 9,",
											"     relatedPersonRelationshipType: \"polygamous partner\",",
											"     relatedPersonFamily: \"Rank9\"},",
											"     ",
											"    {relatedPersonRank: 10,",
											"     relatedPersonRelationshipType: \"dependant\",",
											"     relatedPersonFamily: \"Rank10\"},",
											"",
											"    {relatedPersonRank: 11,",
											"     relatedPersonRelationshipType: \"nondependant\",",
											"     relatedPersonFamily: \"Rank11\"},",
											"     ",
											"    {relatedPersonRank: 12,",
											"     relatedPersonRelationshipType: \"proxy contact\",",
											"     relatedPersonFamily: \"Rank12\"},",
											"     ",
											"    {relatedPersonRank: 13,",
											"    relatedPersonRelationshipType: \"proxy communication\",",
											"    relatedPersonFamily: \"Rank13\"},",
											"     ",
											"    {relatedPersonRank: 14,",
											"    relatedPersonRelationshipType: \"proxy contact communication\",",
											"    relatedPersonFamily: \"Rank14\"},",
											"     ",
											"    {relatedPersonRank: 15,",
											"    relatedPersonRelationshipType: \"carer\",",
											"    relatedPersonFamily: \"Rank15\"},",
											" ",
											"    {relatedPersonRank: 16,",
											"    relatedPersonRelationshipType: \"not specified\",",
											"    relatedPersonFamily: \"Rank16\"},",
											"    ",
											"    {relatedPersonRelationshipType: \"not specified\",",
											"    relatedPersonFamily: \"No Rank\"},",
											"];",
											"pm.variables.set('rank', rank);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"value": "{{from_asid}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"value": "{{role_id}}",
										"type": "text"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"value": "{{user_id}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that all Patient Related Person data is mapped correctly to the Fhir PDS RelatedPerson response, specifically:\n\n* Related Person Address\n* Related Person Rank Extension -  when Rank has been set\n* Related Person CorrespondenceIndicator Extension -  where it has not been set\n* Related Person PreferredContactMethod Extension - where it has been set to \"Visit\"\n* Related Person PreferredContactTimes Extension - where it has not been set\n* Related Person PreferredWrittenCommunicationFormat Extension - where it has not been set\n* Related Person Language Extension - where it has not been set\n* Related Person Name\n* Related Person Period start date\n* Related Person RelationshipType - when type has been set to \"parent\"\n* Related Person RelationshipClass - when class has been set to \"Agent\"\n* Related Person Next of Kin - when next of kin has not been set\n* Related Person Telecom\n\nThis also tests:\n\n* where there are mora than 1 related persons for the Patient, all the related persons are returned\n* the remainder of the Relationship types; self, foster parent, sister, spouse, step parent, not known\n* where get related person by (related person) object id is triggered, then only that related person is returned for the given patient"
							},
							"response": []
						},
						{
							"name": "Related Person Error Responses",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5235c971-3711-48a9-93c3-4faf9e284ce5",
										"exec": [
											"pm.variables.set(\"patientId\", \"5900006360\"); ",
											"",
											"/*Create dataSets for testing 'Retrieve Patient' Error Exceptions scenarios and assign the \"scenario\" array to a variable to be used in Test*/ ",
											"  ",
											"   let scenario = [",
											"       {desc: \"INVALID_NHS_NUMBER - invalid check digit\", ",
											"        nhs_id: \"9000000000\", ",
											"        responseStatus: 400, ",
											"        responseIssueCode: \"value\", ",
											"        responseSeverity: \"error\", ",
											"        responseCode: \"INVALID_RESOURCE_ID\", ",
											"        responseDisplay: \"Resource Id is invalid\"}",
											"        ",
											"        // This is a bug and has been raised",
											"      //  {desc: \"Patient has no Related Persons associated\", ",
											"      //   nhs_id: \"5900006360\", ",
											"      //   responseStatus: 404, ",
											"      //   responseIssueCode: \"not-found\", ",
											"      //   responseSeverity: \"information\", ",
											"      //   responseCode: \"RESOURCE_NOT_FOUND\", ",
											"      //   responseDisplay: \"Resource not found\"}",
											"       ]",
											"       ",
											"    pm.variables.set('scenario', scenario); "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "137d5022-a07d-4075-bf7e-2a82d125e7fa",
										"exec": [
											"/*assign local scenario variable from \"scenario\" variable set in prerequisite script and also assign header variables from variables*/\r",
											"\r",
											"let scenario = pm.variables.get('scenario');\r",
											"let asidHeader = pm.variables.get(\"asidHeader\");\r",
											"let sessionURIDHeader = pm.variables.get(\"sessionURIDHeader\");\r",
											"let identityUUIDHeader = pm.variables.get(\"identityUUIDHeader\");\r",
											"let authorization = pm.environment.get(\"authorizationHeader\");\r",
											"\r",
											"/*for each scenario dataSet loop the Related People Patient service and ensure the correct Error Reponse is returned for each scenario*/   \r",
											"\r",
											"  scenario.forEach(s => {\r",
											"    console.log(\"scenario under test is: \" + s.desc);\r",
											"\r",
											"   pm.sendRequest({\r",
											"        url: pm.environment.get(\"environment\") + \"/Patient/\" + s.nhs_id + \"/RelatedPerson\",\r",
											"        method: 'GET',\r",
											"        header: { asidHeader, sessionURIDHeader, identityUUIDHeader, authorization }\r",
											"        \r",
											"    }, function (err, res) {\r",
											"        let response = res.json();\r",
											"        pm.test('The correct error response has been returned for: ' + s.desc, () => {\r",
											"            pm.expect(res.code).to.equal(s.responseStatus);\r",
											"            pm.expect(response.issue[0].details.coding[0].display).to.equal(s.responseDisplay);\r",
											"            pm.expect(response.issue[0].details.coding[0].code).to.equal(s.responseCode);\r",
											"            pm.expect(response.issue[0].severity).to.equal(s.responseSeverity);\r",
											"            pm.expect(response.issue[0].details.coding[0].system).to.equal('https://fhir.nhs.uk/R4/CodeSystem/Spine-ErrorOrWarningCode');\r",
											"            \r",
											"        })\r",
											"    })\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "{{nhsd-asid-header}}",
										"type": "text",
										"value": "{{from_asid}}"
									},
									{
										"key": "{{nhsd-session-urid-header}}",
										"type": "text",
										"value": "{{role_id}}"
									},
									{
										"key": "{{nhsd-identity-uuid-header}}",
										"type": "text",
										"value": "{{user_id}}"
									}
								],
								"url": {
									"raw": "{{environment}}/Patient/:nhs_id/RelatedPerson",
									"host": [
										"{{environment}}"
									],
									"path": [
										"Patient",
										":nhs_id",
										"RelatedPerson"
									],
									"variable": [
										{
											"key": "nhs_id",
											"value": "{{patientId}}"
										}
									]
								},
								"description": "This test validates that where a Patient does not have a Related person and appropriate error response is returned."
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2a224839-bc2e-4e7a-bb84-622cb0ed9498",
				"type": "text/javascript",
				"exec": [
					"console.log('Running against environment ' + pm.environment.get('environment'));",
					"",
					"// These are the headers for the pm.sendRequest calls",
					"var Header = require('postman-collection').Header;",
					"",
					"pm.environment.set(\"asidHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-asid-header\"),",
					"    value: pm.environment.get(\"from_asid\")",
					"}));",
					"",
					"pm.environment.set(\"sessionURIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-session-urid-header\"),",
					"    value: '1234567890'",
					"}));",
					"",
					"pm.environment.set(\"identityUUIDHeader\", new Header({",
					"    key: pm.globals.get(\"nhsd-identity-uuid-header\"),",
					"    value: pm.environment.get(\"user_id\")",
					"}));",
					"",
					"pm.environment.set(\"authorizationHeader\", new Header({",
					"    key: 'Authorization',",
					"    value: 'Bearer ' + pm.globals.get(\"token\")",
					"}));",
					"",
					"",
					"// When running against apigee, there are a set of headers which we don't want to pass in.",
					"if (pm.environment.get('environment').toLowerCase().includes('api.service.nhs.uk')) {",
					"    console.log(\"Removing headers when running via apigee\");",
					"    pm.request.headers.remove('{{nhsd-asid-header}}');",
					"    pm.request.headers.remove('{{nhsd-identity-uuid-header}}');",
					"    pm.request.headers.remove('NHSD-Identity-JWT');",
					"",
					"    pm.environment.set(\"asidHeader\", undefined);",
					"    pm.environment.set(\"identityUUIDHeader\", undefined);",
					"",
					"    console.log(\"Adding Authorization header\");",
					"    pm.request.headers.add({",
					"        key: 'Authorization',",
					"        value: 'Bearer ' + pm.globals.get(\"token\")",
					"    });",
					"",
					"    pm.environment.set('skipTest', true);",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "85469c01-759b-445c-9bbf-5529518e4348",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "d9a54d7d-4fbd-45f5-9cef-c85e3ecf0cfd",
			"key": "metaVersion",
			"value": "173"
		}
	],
	"protocolProfileBehavior": {}
}
